/*
 * SPDX-FileCopyrightText: 2022 Unisoc (Shanghai) Technologies Co., Ltd
 * SPDX-License-Identifier: LicenseRef-Unisoc-General-1.0
 *
 * Copyright 2022 Unisoc (Shanghai) Technologies Co., Ltd.
 * Licensed under the Unisoc General Software License, version 1.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * https://www.unisoc.com/en_us/license/UNISOC_GENERAL_LICENSE_V1.0-EN_US
 * Software distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OF ANY KIND, either express or implied.
 * See the Unisoc General Software License, version 1.0 for more details.
 */

/*
 * V1.0
 */
/*History
*Date                  Modification                                 Reason
*
*/

#ifndef _SENSOR_s5kjn1_MIPI_RAW_H_
#define _SENSOR_s5kjn1_MIPI_RAW_H_

#include <utils/Log.h>
#include "sensor.h"
#include "jpeg_exif_header.h"
#include "sensor_drv_u.h"
#include "sensor_raw.h"


#define SENSOR_s5kjn1_FULL_SIZE
#define VENDOR_NUM 1
#define SENSOR_NAME "s5kjn1_mipi_raw"
#define I2C_SLAVE_ADDR 0x20 /* 8bit slave address*/

#define s5kjn1_PID_ADDR 0x0000
#define s5kjn1_PID_VALUE 0xe138
#define s5kjn1_VER_ADDR 0x0002
#define s5kjn1_VER_VALUE 0xa000

/* sensor parameters begin */

/* effective sensor output image size */
#define VIDEO_WIDTH 1920
#define VIDEO_HEIGHT 1080
#define PREVIEW_WIDTH 4080
#define PREVIEW_HEIGHT 3072
#define SNAPSHOT_WIDTH 8064 //8160
#define SNAPSHOT_HEIGHT 6144

/*Raw Trim parameters*/
#define VIDEO_TRIM_X 0
#define VIDEO_TRIM_Y 0
#define VIDEO_TRIM_W VIDEO_WIDTH
#define VIDEO_TRIM_H VIDEO_HEIGHT
#define PREVIEW_TRIM_X 0
#define PREVIEW_TRIM_Y 0
#define PREVIEW_TRIM_W PREVIEW_WIDTH
#define PREVIEW_TRIM_H PREVIEW_HEIGHT
#define SNAPSHOT_TRIM_X 0
#define SNAPSHOT_TRIM_Y 0
#define SNAPSHOT_TRIM_W SNAPSHOT_WIDTH
#define SNAPSHOT_TRIM_H SNAPSHOT_HEIGHT

/*Mipi output*/
#define LANE_NUM 4
#define RAW_BITS 10

#define VIDEO_MIPI_PER_LANE_BPS 1980     /* 4*Mipi clk */
#define PREVIEW_MIPI_PER_LANE_BPS 1656   /* 4*Mipi clk */
#define SNAPSHOT_MIPI_PER_LANE_BPS 1392 /* 4*Mipi clk */

/*line time unit: 1ns*/
#define VIDEO_LINE_TIME 4335
#define PREVIEW_LINE_TIME 8222
#define SNAPSHOT_LINE_TIME 15625

/* frame length*/
#define VIDEO_FRAME_LENGTH 1208
#define PREVIEW_FRAME_LENGTH 4054
#define SNAPSHOT_FRAME_LENGTH 6400

/* please ref your spec */
#define FRAME_OFFSET 8
#define SENSOR_MAX_GAIN 0x0200
#define SENSOR_BASE_GAIN 0x0020
#define SENSOR_MIN_SHUTTER 6

/* please ref your spec
 * 1 : average binning
 * 2 : sum-average binning
 * 4 : sum binning
 */
#define BINNING_FACTOR 1

/* please ref spec
 * 1: sensor auto caculate
 * 0: driver caculate
 */
/* sensor parameters end */

/* isp parameters, please don't change it*/
#define ISP_BASE_GAIN 0x80

/* please don't change it */
#define EX_MCLK 24

/*==============================================================================
 * Description:
 * register setting
 *============================================================================*/

static const SENSOR_REG_T s5kjn1_init_setting[] = {
{0x6028, 0x4000},
{0x0000, 0x0002},
{0x0000, 0x38E1},
{0x001E, 0x0007},
{0x6028, 0x4000},
{0x6010, 0x0001},
{0x6226, 0x0001},
{0x6028, 0x2400},
{0x602A, 0x1354},
{0x6F12, 0x0100},
{0x6F12, 0x7017},
{0x602A, 0x13B2},
{0x6F12, 0x0000},
{0x602A, 0x1236},
{0x6F12, 0x0000},
{0x602A, 0x1A0A},
{0x6F12, 0x4C0A},
{0x602A, 0x2210},
{0x6F12, 0x3401},
{0x602A, 0x2176},
{0x6F12, 0x6400},
{0x602A, 0x222E},
{0x6F12, 0x0001},
{0x602A, 0x06B6},
{0x6F12, 0x0A00},
{0x602A, 0x06BC},
{0x6F12, 0x1001},
{0x602A, 0x2140},
{0x6F12, 0x0101},
{0x602A, 0x1A0E},
{0x6F12, 0x9600},
{0x6028, 0x4000},
{0xF44E, 0x0011},
{0xF44C, 0x0B0B},
{0xF44A, 0x0006},
{0x0118, 0x0002},
{0x011A, 0x0001},

};

static const SENSOR_REG_T s5kjn1_preview_setting[] = {
{0x6028,	0x2400},
{0x602A,	0x1A28},
{0x6F12,	0x4C00},
{0x602A,	0x065A},
{0x6F12,	0x0000},
{0x602A,	0x139E},
{0x6F12,	0x0100},
{0x602A,	0x139C},
{0x6F12,	0x0000},
{0x602A,	0x13A0},
{0x6F12,	0x0A00},
{0x6F12,	0x0120},
{0x602A,	0x2072},
{0x6F12,	0x0000},
{0x602A,	0x1A64},
{0x6F12,	0x0301},
{0x6F12,	0xFF00},
{0x602A,	0x19E6},
{0x6F12,	0x0200},
{0x602A,	0x1A30},
{0x6F12,	0x3401},
{0x602A,	0x19FC},
{0x6F12,	0x0B00},
{0x602A,	0x19F4},
{0x6F12,	0x0606},
{0x602A,	0x19F8},
{0x6F12,	0x1010},
{0x602A,	0x1B26},
{0x6F12,	0x6F80},
{0x6F12,	0xA060},
{0x602A,	0x1A3C},
{0x6F12,	0x6207},
{0x602A,	0x1A48},
{0x6F12,	0x6207},
{0x602A,	0x1444},
{0x6F12,	0x2000},
{0x6F12,	0x2000},
{0x602A,	0x144C},
{0x6F12,	0x3F00},
{0x6F12,	0x3F00},
{0x602A,	0x7F6C},
{0x6F12,	0x0100},
{0x6F12,	0x2F00},
{0x6F12,	0xFA00},
{0x6F12,	0x2400},
{0x6F12,	0xE500},
{0x602A,	0x0650},
{0x6F12,	0x0600},
{0x602A,	0x0654},
{0x6F12,	0x0000},
{0x602A,	0x1A46},
{0x6F12,	0x8A00},
{0x602A,	0x1A52},
{0x6F12,	0xBF00},
{0x602A,	0x0674},
{0x6F12,	0x0500},
{0x6F12,	0x0500},
{0x6F12,	0x0500},
{0x6F12,	0x0500},
{0x602A,	0x0668},
{0x6F12,	0x0800},
{0x6F12,	0x0800},
{0x6F12,	0x0800},
{0x6F12,	0x0800},
{0x602A,	0x0684},
{0x6F12,	0x4001},
{0x602A,	0x0688},
{0x6F12,	0x4001},
{0x602A,	0x147C},
{0x6F12,	0x1000},
{0x602A,	0x1480},
{0x6F12,	0x1000},
{0x602A,	0x19F6},
{0x6F12,	0x0904},
{0x602A,	0x0812},
{0x6F12,	0x0000},
{0x602A,	0x1A02},
{0x6F12,	0x1800},
{0x602A,	0x2148},
{0x6F12,	0x0100},
{0x602A,	0x2042},
{0x6F12,	0x1A00},
{0x602A,	0x0874},
{0x6F12,	0x0100},
{0x602A,	0x09C0},
{0x6F12,	0x2008},
{0x602A,	0x09C4},
{0x6F12,	0x2000},
{0x602A,	0x19FE},
{0x6F12,	0x0E1C},
{0x602A,	0x4D92},
{0x6F12,	0x0100},
{0x602A,	0x84C8},
{0x6F12,	0x0100},
{0x602A,	0x4D94},
{0x6F12,	0x0005},
{0x6F12,	0x000A},
{0x6F12,	0x0010},
{0x6F12,	0x0810},
{0x6F12,	0x000A},
{0x6F12,	0x0040},
{0x6F12,	0x0810},
{0x6F12,	0x0810},
{0x6F12,	0x8002},
{0x6F12,	0xFD03},
{0x6F12,	0x0010},
{0x6F12,	0x1510},
{0x602A,	0x3570},
{0x6F12,	0x0000},
{0x602A,	0x3574},
{0x6F12,	0x1201},
{0x602A,	0x21E4},
{0x6F12,	0x0400},
{0x602A,	0x21EC},
{0x6F12,	0x1F04},
{0x602A,	0x2080},
{0x6F12,	0x0101},
{0x6F12,	0xFF00},
{0x6F12,	0x7F01},
{0x6F12,	0x0001},
{0x6F12,	0x8001},
{0x6F12,	0xD244},
{0x6F12,	0xD244},
{0x6F12,	0x14F4},
{0x6F12,	0x0000},
{0x6F12,	0x0000},
{0x6F12,	0x0000},
{0x602A,	0x20BA},
{0x6F12,	0x141C},
{0x6F12,	0x111C},
{0x6F12,	0x54F4},
{0x602A,	0x120E},
{0x6F12,	0x1000},
{0x602A,	0x212E},
{0x6F12,	0x0200},
{0x602A,	0x13AE},
{0x6F12,	0x0101},
{0x602A,	0x0718},
{0x6F12,	0x0001},
{0x602A,	0x0710},
{0x6F12,	0x0002},
{0x6F12,	0x0804},
{0x6F12,	0x0100},
{0x602A,	0x1B5C},
{0x6F12,	0x0000},
{0x602A,	0x0786},
{0x6F12,	0x7701},
{0x602A,	0x2022},
{0x6F12,	0x0500},
{0x6F12,	0x0500},
{0x602A,	0x1360},
{0x6F12,	0x0100},
{0x602A,	0x1376},
{0x6F12,	0x0100},
{0x6F12,	0x6038},
{0x6F12,	0x7038},
{0x6F12,	0x8038},
{0x602A,	0x1386},
{0x6F12,	0x0B00},
{0x602A,	0x06FA},
{0x6F12,	0x1000},
{0x602A,	0x4A94},
{0x6F12,	0x0900},
{0x6F12,	0x0000},
{0x6F12,	0x0300},
{0x6F12,	0x0000},
{0x6F12,	0x0000},
{0x6F12,	0x0000},
{0x6F12,	0x0000},
{0x6F12,	0x0000},
{0x6F12,	0x0300},
{0x6F12,	0x0000},
{0x6F12,	0x0900},
{0x6F12,	0x0000},
{0x6F12,	0x0000},
{0x6F12,	0x0000},
{0x6F12,	0x0000},
{0x6F12,	0x0000},
{0x602A,	0x0A76},
{0x6F12,	0x1000},
{0x602A,	0x0AEE},
{0x6F12,	0x1000},
{0x602A,	0x0B66},
{0x6F12,	0x1000},
{0x602A,	0x0BDE},
{0x6F12,	0x1000},
{0x602A,	0x0BE8},
{0x6F12,	0x3000},
{0x6F12,	0x3000},
{0x602A,	0x0C56},
{0x6F12,	0x1000},
{0x602A,	0x0C60},
{0x6F12,	0x3000},
{0x6F12,	0x3000},
{0x602A,	0x0CB6},
{0x6F12,	0x0100},
{0x602A,	0x0CF2},
{0x6F12,	0x0001},
{0x602A,	0x0CF0},
{0x6F12,	0x0101},
{0x602A,	0x11B8},
{0x6F12,	0x0100},
{0x602A,	0x11F6},
{0x6F12,	0x0020},
{0x602A,	0x4A74},
{0x6F12,	0x0000},
{0x6F12,	0x0000},
{0x6F12,	0xD8FF},
{0x6F12,	0x0000},
{0x6F12,	0x0000},
{0x6F12,	0x0000},
{0x6F12,	0x0000},
{0x6F12,	0x0000},
{0x6F12,	0xD8FF},
{0x6F12,	0x0000},
{0x6F12,	0x0000},
{0x6F12,	0x0000},
{0x6F12,	0x0000},
{0x6F12,	0x0000},
{0x6F12,	0x0000},
{0x6F12,	0x0000},
{0x602A,	0x218E},
{0x6F12,	0x0000},
{0x602A,	0x2268},
{0x6F12,	0xF279},
{0x602A,	0x5006},
{0x6F12,	0x0000},
{0x602A,	0x500E},
{0x6F12,	0x0100},
{0x602A,	0x4E70},
{0x6F12,	0x2062},
{0x6F12,	0x5501},
{0x602A,	0x06DC},
{0x6F12,	0x0000},
{0x6F12,	0x0000},
{0x6F12,	0x0000},
{0x6F12,	0x0000},
{0x6028,	0x4000},
{0xF46A,	0xAE80},
{0x0344,	0x0000},
{0x0346,	0x0000},
{0x0348,	0x1FFF},
{0x034A,	0x181F},
{0x034C,	0x0FF0},
{0x034E,	0x0C00},
{0x0350,	0x0008},
{0x0352,	0x0008},
{0x0900,	0x0122},
{0x0380,	0x0002},
{0x0382,	0x0002},
{0x0384,	0x0002},
{0x0386,	0x0002},
{0x0110,	0x1002},
{0x0114,	0x0301},
{0x0116,	0x3000},
{0x0136,	0x1800},
{0x013E,	0x0000},
{0x0300,	0x0006},
{0x0302,	0x0001},
{0x0304,	0x0004},
{0x0306,	0x008C},
{0x0308,	0x0008},
{0x030A,	0x0001},
{0x030C,	0x0000},
{0x030E,	0x0004},
{0x0310,	0x008A},
{0x0312,	0x0000},
{0x080E,	0x0000},
{0x0340,	0x0FD6},
{0x0342,	0x11E8},
{0x0702,	0x0000},
{0x0202,	0x0100},
{0x0200,	0x0100},
{0x0D00,	0x0101},
{0x0D02,	0x0101},
{0x0D04,	0x0102},
{0x6226,	0x0000},

};

static const SENSOR_REG_T s5kjn1_snapshot_setting[] = {
{0x6028,	0x2400},
{0x602A,	0x1A28},
{0x6F12,	0x4C00},
{0x602A,	0x065A},
{0x6F12,	0x0000},
{0x602A,	0x139E},
{0x6F12,	0x0400},
{0x602A,	0x139C},
{0x6F12,	0x0100},
{0x602A,	0x13A0},
{0x6F12,	0x0500},
{0x6F12,	0x0120},
{0x602A,	0x2072},
{0x6F12,	0x0101},
{0x602A,	0x1A64},
{0x6F12,	0x0001},
{0x6F12,	0x0000},
{0x602A,	0x19E6},
{0x6F12,	0x0200},
{0x602A,	0x1A30},
{0x6F12,	0x3403},
{0x602A,	0x19FC},
{0x6F12,	0x0700},
{0x602A,	0x19F4},
{0x6F12,	0x0707},
{0x602A,	0x19F8},
{0x6F12,	0x0B0B},
{0x602A,	0x1B26},
{0x6F12,	0x6F80},
{0x6F12,	0xA060},
{0x602A,	0x1A3C},
{0x6F12,	0x8207},
{0x602A,	0x1A48},
{0x6F12,	0x8207},
{0x602A,	0x1444},
{0x6F12,	0x2000},
{0x6F12,	0x2000},
{0x602A,	0x144C},
{0x6F12,	0x3F00},
{0x6F12,	0x3F00},
{0x602A,	0x7F6C},
{0x6F12,	0x0100},
{0x6F12,	0x2F00},
{0x6F12,	0xFA00},
{0x6F12,	0x2400},
{0x6F12,	0xE500},
{0x602A,	0x0650},
{0x6F12,	0x0600},
{0x602A,	0x0654},
{0x6F12,	0x0000},
{0x602A,	0x1A46},
{0x6F12,	0x8500},
{0x602A,	0x1A52},
{0x6F12,	0x9800},
{0x602A,	0x0674},
{0x6F12,	0x0500},
{0x6F12,	0x0500},
{0x6F12,	0x0500},
{0x6F12,	0x0500},
{0x602A,	0x0668},
{0x6F12,	0x0800},
{0x6F12,	0x0800},
{0x6F12,	0x0800},
{0x6F12,	0x0800},
{0x602A,	0x0684},
{0x6F12,	0x4001},
{0x602A,	0x0688},
{0x6F12,	0x4001},
{0x602A,	0x147C},
{0x6F12,	0x0400},
{0x602A,	0x1480},
{0x6F12,	0x0400},
{0x602A,	0x19F6},
{0x6F12,	0x0404},
{0x602A,	0x0812},
{0x6F12,	0x0000},
{0x602A,	0x1A02},
{0x6F12,	0x1800},
{0x602A,	0x2148},
{0x6F12,	0x0100},
{0x602A,	0x2042},
{0x6F12,	0x1A00},
{0x602A,	0x0874},
{0x6F12,	0x0106},
{0x602A,	0x09C0},
{0x6F12,	0x4000},
{0x602A,	0x09C4},
{0x6F12,	0x4000},
{0x602A,	0x19FE},
{0x6F12,	0x0C1C},
{0x602A,	0x4D92},
{0x6F12,	0x0000},
{0x602A,	0x84C8},
{0x6F12,	0x0000},
{0x602A,	0x4D94},
{0x6F12,	0x0000},
{0x6F12,	0x0000},
{0x6F12,	0x0000},
{0x6F12,	0x0000},
{0x6F12,	0x0000},
{0x6F12,	0x0000},
{0x6F12,	0x0000},
{0x6F12,	0x0000},
{0x6F12,	0x0000},
{0x6F12,	0x0000},
{0x6F12,	0x0000},
{0x6F12,	0x0000},
{0x602A,	0x3570},
{0x6F12,	0x0000},
{0x602A,	0x3574},
{0x6F12,	0x7306},
{0x602A,	0x21E4},
{0x6F12,	0x0400},
{0x602A,	0x21EC},
{0x6F12,	0x6902},
{0x602A,	0x2080},
{0x6F12,	0x0100},
{0x6F12,	0xFF00},
{0x6F12,	0x0002},
{0x6F12,	0x0001},
{0x6F12,	0x0002},
{0x6F12,	0xD244},
{0x6F12,	0xD244},
{0x6F12,	0x14F4},
{0x6F12,	0x101C},
{0x6F12,	0x0D1C},
{0x6F12,	0x54F4},
{0x602A,	0x20BA},
{0x6F12,	0x0000},
{0x6F12,	0x0000},
{0x6F12,	0x0000},
{0x602A,	0x120E},
{0x6F12,	0x1000},
{0x602A,	0x212E},
{0x6F12,	0x0200},
{0x602A,	0x13AE},
{0x6F12,	0x0100},
{0x602A,	0x0718},
{0x6F12,	0x0000},
{0x602A,	0x0710},
{0x6F12,	0x0010},
{0x6F12,	0x0201},
{0x6F12,	0x0800},
{0x602A,	0x1B5C},
{0x6F12,	0x0000},
{0x602A,	0x0786},
{0x6F12,	0x1401},
{0x602A,	0x2022},
{0x6F12,	0x0500},
{0x6F12,	0x0500},
{0x602A,	0x1360},
{0x6F12,	0x0000},
{0x602A,	0x1376},
{0x6F12,	0x0000},
{0x6F12,	0x6038},
{0x6F12,	0x7038},
{0x6F12,	0x8038},
{0x602A,	0x1386},
{0x6F12,	0x0B00},
{0x602A,	0x06FA},
{0x6F12,	0x1000},
{0x602A,	0x4A94},
{0x6F12,	0x0400},
{0x6F12,	0x0400},
{0x6F12,	0x0400},
{0x6F12,	0x0400},
{0x6F12,	0x0800},
{0x6F12,	0x0800},
{0x6F12,	0x0800},
{0x6F12,	0x0800},
{0x6F12,	0x0400},
{0x6F12,	0x0400},
{0x6F12,	0x0400},
{0x6F12,	0x0400},
{0x6F12,	0x0800},
{0x6F12,	0x0800},
{0x6F12,	0x0800},
{0x6F12,	0x0800},
{0x602A,	0x0A76},
{0x6F12,	0x1000},
{0x602A,	0x0AEE},
{0x6F12,	0x1000},
{0x602A,	0x0B66},
{0x6F12,	0x1000},
{0x602A,	0x0BDE},
{0x6F12,	0x1000},
{0x602A,	0x0BE8},
{0x6F12,	0x5000},
{0x6F12,	0x5000},
{0x602A,	0x0C56},
{0x6F12,	0x1000},
{0x602A,	0x0C60},
{0x6F12,	0x5000},
{0x6F12,	0x5000},
{0x602A,	0x0CB6},
{0x6F12,	0x0000},
{0x602A,	0x0CF2},
{0x6F12,	0x0001},
{0x602A,	0x0CF0},
{0x6F12,	0x0101},
{0x602A,	0x11B8},
{0x6F12,	0x0000},
{0x602A,	0x11F6},
{0x6F12,	0x0010},
{0x602A,	0x4A74},
{0x6F12,	0x0000},
{0x6F12,	0x0000},
{0x6F12,	0x0000},
{0x6F12,	0x0000},
{0x6F12,	0x0000},
{0x6F12,	0x0000},
{0x6F12,	0x0000},
{0x6F12,	0x0000},
{0x6F12,	0x0000},
{0x6F12,	0x0000},
{0x6F12,	0x0000},
{0x6F12,	0x0000},
{0x6F12,	0x0000},
{0x6F12,	0x0000},
{0x6F12,	0x0000},
{0x6F12,	0x0000},
{0x602A,	0x218E},
{0x6F12,	0x0000},
{0x602A,	0x2268},
{0x6F12,	0xF279},
{0x602A,	0x5006},
{0x6F12,	0x0000},
{0x602A,	0x500E},
{0x6F12,	0x0100},
{0x602A,	0x4E70},
{0x6F12,	0x2062},
{0x6F12,	0x5501},
{0x602A,	0x06DC},
{0x6F12,	0x0000},
{0x6F12,	0x0000},
{0x6F12,	0x0000},
{0x6F12,	0x0000},
{0x6028,	0x4000},
{0xF46A,	0xAE80},
{0x0344,	0x0000},
{0x0346,	0x0000},
{0x0348,	0x1FFF},
{0x034A,	0x181F},
{0x034C,	0x1F80},//8064 //E0},
{0x034E,	0x1800},
{0x0350,	0x0010},
{0x0352,	0x0010},
{0x0900,	0x0111},
{0x0380,	0x0001},
{0x0382,	0x0001},
{0x0384,	0x0001},
{0x0386,	0x0001},
{0x0110,	0x1002},
{0x0114,	0x0300},
{0x0116,	0x3000},
{0x0136,	0x1800},
{0x013E,	0x0000},
{0x0300,	0x0006},
{0x0302,	0x0001},
{0x0304,	0x0004},
{0x0306,	0x008C},
{0x0308,	0x0008},
{0x030A,	0x0001},
{0x030C,	0x0000},
{0x030E,	0x0004},
{0x0310,	0x0074},
{0x0312,	0x0000},
{0x080E,	0x0000},
{0x0340,	0x1900},
{0x0342,	0x21F0},
{0x0702,	0x0000},
{0x0202,	0x0100},
{0x0200,	0x0100},
{0x0D00,	0x0100},
{0x0D02,	0x0001},
{0x0D04,	0x0002},
{0x6226,	0x0000},

};

static struct sensor_res_tab_info s_s5kjn1_resolution_tab_raw[VENDOR_NUM] = {
    {.module_id = MODULE_SUNNY,
     .reg_tab =
         {{ADDR_AND_LEN_OF_ARRAY(s5kjn1_init_setting), PNULL, 0, .width = 0,
           .height = 0, .xclk_to_sensor = EX_MCLK,
           .image_format = SENSOR_IMAGE_FORMAT_RAW},
 
          {ADDR_AND_LEN_OF_ARRAY(s5kjn1_preview_setting), PNULL, 0,
           .width = PREVIEW_WIDTH, .height = PREVIEW_HEIGHT,
           .xclk_to_sensor = EX_MCLK, .image_format = SENSOR_IMAGE_FORMAT_RAW,
           .is_cropped = 0,
           .crop_start_x = 0,
           .crop_start_y = 0,
           .binning = 2},

#ifdef SENSOR_s5kjn1_FULL_SIZE
          {ADDR_AND_LEN_OF_ARRAY(s5kjn1_snapshot_setting), PNULL, 0,
           .width = SNAPSHOT_WIDTH, .height = SNAPSHOT_HEIGHT,
           .xclk_to_sensor = EX_MCLK, .image_format = SENSOR_IMAGE_FORMAT_RAW,
           .is_cropped = 0,
           .crop_start_x = 0,
           .crop_start_y = 0,
           .binning = 1}
#endif           
           }}

    /*If there are multiple modules,please add here*/
};

static SENSOR_TRIM_T s_s5kjn1_resolution_trim_tab[VENDOR_NUM] = {
    {.module_id = MODULE_SUNNY,
     .trim_info =
         {
             {0, 0, 0, 0, 0, 0, 0, {0, 0, 0, 0}},

             {.trim_start_x = PREVIEW_TRIM_X,
              .trim_start_y = PREVIEW_TRIM_Y,
              .trim_width = PREVIEW_TRIM_W,
              .trim_height = PREVIEW_TRIM_H,
              .line_time = PREVIEW_LINE_TIME,
              .bps_per_lane = PREVIEW_MIPI_PER_LANE_BPS,
              .frame_line = PREVIEW_FRAME_LENGTH,
              .scaler_trim = {.x = PREVIEW_TRIM_X,
                              .y = PREVIEW_TRIM_Y,
                              .w = PREVIEW_TRIM_W,
                              .h = PREVIEW_TRIM_H}},

#ifdef SENSOR_s5kjn1_FULL_SIZE
             {.trim_start_x = SNAPSHOT_TRIM_X,
              .trim_start_y = SNAPSHOT_TRIM_Y,
              .trim_width = SNAPSHOT_TRIM_W,
              .trim_height = SNAPSHOT_TRIM_H,
              .line_time = SNAPSHOT_LINE_TIME,
              .bps_per_lane = SNAPSHOT_MIPI_PER_LANE_BPS,
              .frame_line = SNAPSHOT_FRAME_LENGTH,
              .scaler_trim = {.x = SNAPSHOT_TRIM_X,
                              .y = SNAPSHOT_TRIM_Y,
                              .w = SNAPSHOT_TRIM_W,
                              .h = SNAPSHOT_TRIM_H}},
#endif
         }}

    /*If there are multiple modules,please add here*/
};

static SENSOR_REG_T s5kjn1_shutter_reg[] = {
    {0x0202, 0x0006},
};

static struct sensor_i2c_reg_tab s5kjn1_shutter_tab = {
    .settings = s5kjn1_shutter_reg, .size = ARRAY_SIZE(s5kjn1_shutter_reg),
};

static SENSOR_REG_T s5kjn1_again_reg[] = {
    {0x0204, 0x0020},
};

static struct sensor_i2c_reg_tab s5kjn1_again_tab = {
    .settings = s5kjn1_again_reg, .size = ARRAY_SIZE(s5kjn1_again_reg),
};

static SENSOR_REG_T s5kjn1_dgain_reg[] = {

};

static struct sensor_i2c_reg_tab s5kjn1_dgain_tab = {
    .settings = s5kjn1_dgain_reg, .size = ARRAY_SIZE(s5kjn1_dgain_reg),
};

static SENSOR_REG_T s5kjn1_frame_length_reg[] = {
    {0x0340, 0x1894},
};

static struct sensor_i2c_reg_tab s5kjn1_frame_length_tab = {
    .settings = s5kjn1_frame_length_reg,
    .size = ARRAY_SIZE(s5kjn1_frame_length_reg),
};

static struct sensor_aec_i2c_tag s5kjn1_aec_info = {
    .slave_addr = (I2C_SLAVE_ADDR >> 1),
    .addr_bits_type = SENSOR_I2C_REG_16BIT,
    .data_bits_type = SENSOR_I2C_VAL_16BIT,
    .shutter = &s5kjn1_shutter_tab,
    .again = &s5kjn1_again_tab,
    .dgain = &s5kjn1_dgain_tab,
    .frame_length = &s5kjn1_frame_length_tab,
};

static SENSOR_STATIC_INFO_T s_s5kjn1_static_info[VENDOR_NUM] = {
    {.module_id = MODULE_SUNNY,
     .static_info = {.f_num = 160,
                     .focal_length = 411,
                     .max_fps = 30,
                     .max_adgain = 8,
                     .ois_supported = 0,
#ifdef CONFIG_CAMERA_PDAF_TYPE
                     .pdaf_supported = CONFIG_CAMERA_PDAF_TYPE,
#else
                     .pdaf_supported = 0,
#endif
                     .exp_valid_frame_num = 1,
                     .clamp_level = 64,
                     .adgain_valid_frame_num = 1,
                     .fov_info = {{5.222f, 3.932f}, 4.273f}}}
    /*If there are multiple modules,please add here*/
};

static SENSOR_MODE_FPS_INFO_T s_s5kjn1_mode_fps_info[VENDOR_NUM] = {
    {.module_id = MODULE_SUNNY,
     {.is_init = 0,
      {{SENSOR_MODE_COMMON_INIT, 0, 1, 0, 0},
       {SENSOR_MODE_PREVIEW_ONE, 0, 1, 0, 0},
       {SENSOR_MODE_SNAPSHOT_ONE_FIRST, 0, 1, 0, 0},
       {SENSOR_MODE_SNAPSHOT_ONE_SECOND, 0, 1, 0, 0},
       {SENSOR_MODE_SNAPSHOT_ONE_THIRD, 0, 1, 0, 0},
       {SENSOR_MODE_PREVIEW_TWO, 0, 1, 0, 0},
       {SENSOR_MODE_SNAPSHOT_TWO_FIRST, 0, 1, 0, 0},
       {SENSOR_MODE_SNAPSHOT_TWO_SECOND, 0, 1, 0, 0},
       {SENSOR_MODE_SNAPSHOT_TWO_THIRD, 0, 1, 0, 0}}}}
    /*If there are multiple modules,please add here*/
};

static struct sensor_module_info s_s5kjn1_module_info_tab[VENDOR_NUM] = {
    {.module_id = MODULE_SUNNY,
     .module_info = {.major_i2c_addr = I2C_SLAVE_ADDR >> 1,
                     .minor_i2c_addr = 0x5a >> 1,

                     .reg_addr_value_bits = SENSOR_I2C_REG_16BIT |
                                            SENSOR_I2C_VAL_16BIT |
                                            SENSOR_I2C_FREQ_400,

                     .avdd_val = SENSOR_AVDD_2800MV,
                     .iovdd_val = SENSOR_AVDD_1800MV,
                     .dvdd_val = SENSOR_AVDD_1100MV,

                     .image_pattern = SENSOR_IMAGE_PATTERN_RAWRGB_GB,

                     .preview_skip_num = 1,
                     .capture_skip_num = 1,
                     .flash_capture_skip_num = 6,
                     .mipi_cap_skip_num = 0,
                     .preview_deci_num = 0,
                     .video_preview_deci_num = 0,

                     .threshold_eb = 0,
                     .threshold_mode = 0,
                     .threshold_start = 0,
                     .threshold_end = 0,

                     .sensor_interface =
                         {
                             .type = SENSOR_INTERFACE_TYPE_CSI2,
                             .bus_width = LANE_NUM,
                             .pixel_width = RAW_BITS,
                             #ifdef _SENSOR_RAW_SHARKL5PRO_H_,
                                 .is_loose = 2,
                             #else
                                 .is_loose = 0,
                             #endif
                         },
                     .change_setting_skip_num = 1,
                     .horizontal_view_angle = 65,
                     .vertical_view_angle = 60}}

    /*If there are multiple modules,please add here*/
};

static struct sensor_ic_ops s_s5kjn1_ops_tab;
struct sensor_raw_info *s_s5kjn1_mipi_raw_info_ptr =
    PNULL; //&s_s5kjn1_mipi_raw_info;

/*==============================================================================
 * Description:
 * sensor all info
 * please modify this variable acording your spec
 *============================================================================*/
SENSOR_INFO_T g_s5kjn1_mipi_raw_info = {
    .hw_signal_polarity = SENSOR_HW_SIGNAL_PCLK_P | SENSOR_HW_SIGNAL_VSYNC_P |
                          SENSOR_HW_SIGNAL_HSYNC_P,
    .environment_mode = SENSOR_ENVIROMENT_NORMAL | SENSOR_ENVIROMENT_NIGHT,
    .image_effect = SENSOR_IMAGE_EFFECT_NORMAL |
                    SENSOR_IMAGE_EFFECT_BLACKWHITE | SENSOR_IMAGE_EFFECT_RED |
                    SENSOR_IMAGE_EFFECT_GREEN | SENSOR_IMAGE_EFFECT_BLUE |
                    SENSOR_IMAGE_EFFECT_YELLOW | SENSOR_IMAGE_EFFECT_NEGATIVE |
                    SENSOR_IMAGE_EFFECT_CANVAS,

    .wb_mode = 0,
    .step_count = 7,
    .reset_pulse_level = SENSOR_LOW_PULSE_RESET,
    .reset_pulse_width = 50,
    .power_down_level = SENSOR_LOW_LEVEL_PWDN,
    .identify_count = 1,
    .identify_code = {{.reg_addr = s5kjn1_PID_ADDR,
                       .reg_value = s5kjn1_PID_VALUE},
                      {.reg_addr = s5kjn1_VER_ADDR,
                       .reg_value = s5kjn1_VER_VALUE}},

    .source_width_max = SNAPSHOT_WIDTH,
    .source_height_max = SNAPSHOT_HEIGHT,
    .name = (cmr_s8 *)SENSOR_NAME,
    .image_format = SENSOR_IMAGE_FORMAT_RAW,

    .module_info_tab = s_s5kjn1_module_info_tab,
    .module_info_tab_size = ARRAY_SIZE(s_s5kjn1_module_info_tab),

    .resolution_tab_info_ptr = s_s5kjn1_resolution_tab_raw,
    .sns_ops = &s_s5kjn1_ops_tab,
    .raw_info_ptr = &s_s5kjn1_mipi_raw_info_ptr,

    .video_tab_info_ptr = NULL,
    .sensor_version_info = (cmr_s8 *)"s5kjn1_v1",
};

#endif
