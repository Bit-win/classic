/*
* SPDX-FileCopyrightText: 2023 Unisoc (Shanghai) Technologies Co., Ltd
* SPDX-License-Identifier: LicenseRef-Unisoc-General-1.0
*
* Copyright 2023 Unisoc (Shanghai) Technologies Co., Ltd.
* Licensed under the Unisoc General Software License, version 1.0 (the License);
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* https://www.unisoc.com/en_us/license/UNISOC_GENERAL_LICENSE_V1.0-EN_US
* Software distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OF ANY KIND, either express or implied.
* See the Unisoc General Software License, version 1.0 for more details.
*
* USE:
* Change sensor_name for Your sensor in sensor_name()
*/


package sensor_adgust_s5kjn1

import (
    "android/soong/android"
    "android/soong/cc"
    "fmt"
    "os"
    "path"
    "path/filepath"
    "runtime"
)
var sensor_drv_name string = "sensor_s5kjn1_mipi_raw.c"

func init() {
    android.RegisterModuleType("cc_library_shared_s5kjn1", sensorService_LibraryFactory)
}

func sensorService_LibraryFactory() (android.Module) {
    module := cc.LibrarySharedFactory()
    android.AddLoadHook(module, sensorService_Defaults)
    return module
}

func sensorService_Defaults(ctx android.LoadHookContext) {
    type props struct {
        Srcs []string
    }

    p := &props{}
    p.Srcs = getSrcs(ctx)
    ctx.AppendProperties(p)
}

func getSrcs(ctx android.BaseContext) ([]string) {
    var srcs []string
    var target_board string
    var dir string

    target_board = ctx.AConfig().Getenv("TARGET_PRODUCT")

    _, err := ctx.GlobWithDeps(filepath.Join(ctx.ModuleDir(),target_board), nil)
    if err != nil {
        fmt.Println("SensorDrvAdjust GlobWithDeps err")
    }

    _,filename,_, ok := runtime.Caller(0)
    if ok {
        dir = path.Dir(filename)
    }

    pathDir := filepath.Join(dir,target_board)
    fmt.Println("SensorDrvAdjust pathDir "+pathDir)

    bool,_ := PathExists(pathDir)
    if bool {
        srcs = append(srcs, target_board + "/" +sensor_drv_name)
        fmt.Println("SensorDrvAdjust use "+target_board)
    } else {
        srcs = append(srcs, sensor_drv_name)
        fmt.Println("SensorDrvAdjust use default "+sensor_drv_name)
    }

    return srcs
}

func PathExists(path string)(bool,error){
    _ , err := os.Stat(path)
    if err == nil{
        return true,nil
    }
    if os.IsNotExist(err){
        return false,nil
    }
    fmt.Println("SensorDrvAdjust PathExists NULL ")
    return false,err
}
