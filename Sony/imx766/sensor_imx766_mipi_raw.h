/*
 * SPDX-FileCopyrightText: 2022 Unisoc (Shanghai) Technologies Co., Ltd
 * SPDX-License-Identifier: LicenseRef-Unisoc-General-1.0
 *
 * Copyright 2022 Unisoc (Shanghai) Technologies Co., Ltd.
 * Licensed under the Unisoc General Software License, version 1.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * https://www.unisoc.com/en_us/license/UNISOC_GENERAL_LICENSE_V1.0-EN_US
 * Software distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OF ANY KIND, either express or implied.
 * See the Unisoc General Software License, version 1.0 for more details.
 */

/*
 * V1.0
 */
/*History
*Date                  Modification                                 Reason
*
*/

#ifndef _SENSOR_imx766_MIPI_RAW_H_
#define _SENSOR_imx766_MIPI_RAW_H_

#include <utils/Log.h>
#include "sensor.h"
#include "jpeg_exif_header.h"
#include "sensor_drv_u.h"
#include "sensor_raw.h"

//#define FEATURE_OTP

#define VENDOR_NUM 1
#define SENSOR_NAME "imx766_mipi_raw"
#define I2C_SLAVE_ADDR 0x20 /* 8bit slave address*/

#define imx766_PID_ADDR 0x0016
#define imx766_PID_VALUE 0x07
#define imx766_VER_ADDR 0x0017
#define imx766_VER_VALUE 0x66

/* sensor parameters begin */

/* effective sensor output image size */
#define VIDEO_WIDTH 1920
#define VIDEO_HEIGHT 1080
#define PREVIEW_WIDTH 4096 //4000
#define PREVIEW_HEIGHT 3072 //3000
#define SNAPSHOT_WIDTH 8192
#define SNAPSHOT_HEIGHT 6144

/*Raw Trim parameters*/
#define VIDEO_TRIM_X 0
#define VIDEO_TRIM_Y 0
#define VIDEO_TRIM_W VIDEO_WIDTH
#define VIDEO_TRIM_H VIDEO_HEIGHT
#define PREVIEW_TRIM_X 0
#define PREVIEW_TRIM_Y 0
#define PREVIEW_TRIM_W PREVIEW_WIDTH
#define PREVIEW_TRIM_H PREVIEW_HEIGHT
#define SNAPSHOT_TRIM_X 0
#define SNAPSHOT_TRIM_Y 0
#define SNAPSHOT_TRIM_W SNAPSHOT_WIDTH
#define SNAPSHOT_TRIM_H SNAPSHOT_HEIGHT

/*Mipi output*/
#define LANE_NUM 4
#define RAW_BITS 10

#define VIDEO_MIPI_PER_LANE_BPS 776   /* 2*Mipi clk */
#define PREVIEW_MIPI_PER_LANE_BPS 1050  /* 2*Mipi clk */
#define SNAPSHOT_MIPI_PER_LANE_BPS 1352 /* 2*Mipi clk */

/*line time unit: 1ns*/
#define VIDEO_LINE_TIME 7240
#define PREVIEW_LINE_TIME 4440
#define SNAPSHOT_LINE_TIME 10990

/* frame length*/
#define VIDEO_FRAME_LENGTH 1150
#define PREVIEW_FRAME_LENGTH 15616
#define SNAPSHOT_FRAME_LENGTH 6062

/* please ref your spec */
#define FRAME_OFFSET 48
#define SENSOR_MAX_GAIN 0x2c0
#define SENSOR_BASE_GAIN 0x0020
#define SENSOR_MIN_SHUTTER 6

/* please ref your spec
 * 1 : average binning
 * 2 : sum-average binning
 * 4 : sum binning
 */
#define BINNING_FACTOR 1

/* please ref spec
 * 1: sensor auto caculate
 * 0: driver caculate
 */
/* sensor parameters end */

/* isp parameters, please don't change it*/
#define ISP_BASE_GAIN 0x80

/* please don't change it */
#define EX_MCLK 24

/*==============================================================================
 * Description:
 * register setting
 *============================================================================*/
static const SENSOR_REG_T imx766_init_setting[] = {
/*Stand-by OFF Sequence			
	Power ON		
	Input EXTCLK		
	XCLR OFF		
	External Clock Setting*/
{0x0136, 0x18},
{0x0137, 0x00},
{0x33F0, 0x01},
{0x33F1, 0x09},
{0x0111, 0x02},
{0x33D3, 0x01},
{0x3892, 0x01},
{0x4C14, 0x00},
{0x4C15, 0x07},
{0x4C16, 0x00},
{0x4C17, 0x1B},
{0x4C1A, 0x00},
{0x4C1B, 0x03},
{0x4C1C, 0x00},
{0x4C1D, 0x00},
{0x4C1E, 0x00},
{0x4C1F, 0x02},
{0x4C20, 0x00},
{0x4C21, 0x5F},
{0x4C26, 0x00},
{0x4C27, 0x43},
{0x4C28, 0x00},
{0x4C29, 0x09},
{0x4C2A, 0x00},
{0x4C2B, 0x4A},
{0x4C2C, 0x00},
{0x4C2D, 0x00},
{0x4C2E, 0x00},
{0x4C2F, 0x02},
{0x4C30, 0x00},
{0x4C31, 0xC6},
{0x4C3E, 0x00},
{0x4C3F, 0x55},
{0x4C52, 0x00},
{0x4C53, 0x97},
{0x4CB4, 0x00},
{0x4CB5, 0x55},
{0x4CC8, 0x00},
{0x4CC9, 0x97},
{0x4D04, 0x00},
{0x4D05, 0x4F},
{0x4D74, 0x00},
{0x4D75, 0x55},
{0x4F06, 0x00},
{0x4F07, 0x5F},
{0x4F48, 0x00},
{0x4F49, 0xC6},
{0x544A, 0xFF},
{0x544B, 0xFF},
{0x544E, 0x01},
{0x544F, 0xBD},
{0x5452, 0xFF},
{0x5453, 0xFF},
{0x5456, 0x00},
{0x5457, 0xA5},
{0x545A, 0xFF},
{0x545B, 0xFF},
{0x545E, 0x00},
{0x545F, 0xA5},
{0x5496, 0x00},
{0x5497, 0xA2},
{0x54F6, 0x01},
{0x54F7, 0x55},
{0x54F8, 0x01},
{0x54F9, 0x61},
{0x5670, 0x00},
{0x5671, 0x85},
{0x5672, 0x01},
{0x5673, 0x77},
{0x5674, 0x01},
{0x5675, 0x2F},
{0x5676, 0x02},
{0x5677, 0x55},
{0x5678, 0x00},
{0x5679, 0x85},
{0x567A, 0x01},
{0x567B, 0x77},
{0x567C, 0x01},
{0x567D, 0x2F},
{0x567E, 0x02},
{0x567F, 0x55},
{0x5680, 0x00},
{0x5681, 0x85},
{0x5682, 0x01},
{0x5683, 0x77},
{0x5684, 0x01},
{0x5685, 0x2F},
{0x5686, 0x02},
{0x5687, 0x55},
{0x5688, 0x00},
{0x5689, 0x85},
{0x568A, 0x01},
{0x568B, 0x77},
{0x568C, 0x01},
{0x568D, 0x2F},
{0x568E, 0x02},
{0x568F, 0x55},
{0x5690, 0x01},
{0x5691, 0x7A},
{0x5692, 0x02},
{0x5693, 0x6C},
{0x5694, 0x01},
{0x5695, 0x35},
{0x5696, 0x02},
{0x5697, 0x5B},
{0x5698, 0x01},
{0x5699, 0x7A},
{0x569A, 0x02},
{0x569B, 0x6C},
{0x569C, 0x01},
{0x569D, 0x35},
{0x569E, 0x02},
{0x569F, 0x5B},
{0x56A0, 0x01},
{0x56A1, 0x7A},
{0x56A2, 0x02},
{0x56A3, 0x6C},
{0x56A4, 0x01},
{0x56A5, 0x35},
{0x56A6, 0x02},
{0x56A7, 0x5B},
{0x56A8, 0x01},
{0x56A9, 0x80},
{0x56AA, 0x02},
{0x56AB, 0x72},
{0x56AC, 0x01},
{0x56AD, 0x2F},
{0x56AE, 0x02},
{0x56AF, 0x55},
{0x5902, 0x0E},
{0x5A69, 0x01},
{0x5D90, 0x03},
{0x5D91, 0x0A},
{0x5D92, 0x1F},
{0x5D93, 0x05},
{0x5D97, 0x1F},
{0x5D9A, 0x06},
{0x5D9C, 0x1F},
{0x5DA1, 0x1F},
{0x5DA6, 0x1F},
{0x5DA8, 0x1F},
{0x5DAB, 0x1F},
{0x5E3E, 0x00},
{0x5E3F, 0x00},
{0x5E41, 0x00},
{0x5E48, 0x00},
{0x5E49, 0x00},
{0x5E4A, 0x00},
{0x5E4C, 0x00},
{0x5E4D, 0x00},
{0x5E4E, 0x00},
{0x6026, 0x03},
{0x6028, 0x03},
{0x602A, 0x03},
{0x602C, 0x03},
{0x602F, 0x03},
{0x6036, 0x03},
{0x6038, 0x03},
{0x603A, 0x03},
{0x603C, 0x03},
{0x603F, 0x03},
{0x6074, 0x19},
{0x6076, 0x19},
{0x6078, 0x19},
{0x607A, 0x19},
{0x607D, 0x19},
{0x6084, 0x32},
{0x6086, 0x32},
{0x6088, 0x32},
{0x608A, 0x32},
{0x608D, 0x32},
{0x62F9, 0x14},
{0x630D, 0x0D},
{0x6317, 0x0D},
{0x6352, 0x00},
{0x6353, 0x5F},
{0x6366, 0x00},
{0x6367, 0x5F},
{0x63B2, 0x00},
{0x63B3, 0xC6},
{0x63C6, 0x00},
{0x63C7, 0xC6},
{0x8BDB, 0x02},
{0x8BDE, 0x02},
{0x8BE1, 0x2D},
{0x8BE4, 0x00},
{0x8BE5, 0x00},
{0x8BE6, 0x01},
{0x9002, 0x14},
{0x9200, 0xB5},
{0x9201, 0x9E},
{0x9202, 0xB5},
{0x9203, 0x42},
{0x9204, 0xB5},
{0x9205, 0x43},
{0x9206, 0xBD},
{0x9207, 0x20},
{0x9208, 0xBD},
{0x9209, 0x22},
{0x920A, 0xBD},
{0x920B, 0x23},
{0xB5D7, 0x10},
{0xBD24, 0x00},
{0xBD25, 0x00},
{0xBD26, 0x00},
{0xBD27, 0x00},
{0xBD28, 0x00},
{0xBD29, 0x00},
{0xBD2A, 0x00},
{0xBD2B, 0x00},
{0xBD2C, 0x32},
{0xBD2D, 0x70},
{0xBD2E, 0x25},
{0xBD2F, 0x30},
{0xBD30, 0x3B},
{0xBD31, 0xE0},
{0xBD32, 0x69},
{0xBD33, 0x40},
{0xBD34, 0x25},
{0xBD35, 0x90},
{0xBD36, 0x58},
{0xBD37, 0x00},
{0xBD38, 0x00},
{0xBD39, 0x00},
{0xBD3A, 0x00},
{0xBD3B, 0x00},
{0xBD3C, 0x32},
{0xBD3D, 0x70},
{0xBD3E, 0x25},
{0xBD3F, 0x90},
{0xBD40, 0x58},
{0xBD41, 0x00},
{0x793B, 0x01},
{0xACC6, 0x00},
{0xACF5, 0x00},
{0x793B, 0x00},
{0x1F04, 0xB3},
{0x1F05, 0x01},
{0x1F06, 0x07},
{0x1F07, 0x66},
{0x1F08, 0x01},
{0x4D18, 0x00},
{0x4D19, 0x9D},
{0x4D88, 0x00},
{0x4D89, 0x97},
{0x5C57, 0x0A},
{0x5D94, 0x1F},
{0x5D9E, 0x1F},
{0x33F2, 0x01},
{0x1F04, 0xA3},
{0x1F05, 0x01},
{0x4D18, 0x00},
{0x4D19, 0xB1},
{0x4D88, 0x00},
{0x4D89, 0xAB},
{0x5C57, 0x09},
{0x5D94, 0x0A},
{0x5D9E, 0x0A},
{0x60C6, 0x36},
{0x60C8, 0x36},
{0x60D6, 0x36},
{0x60D8, 0x36},
{0x33F2, 0x02},
{0x1F08, 0x00},

};
static const SENSOR_REG_T imx766_video_setting[] = {
/*4Lane		
reg_C		
1920x1080@120fps, 2x2 Adjacent Pixel Binning V2H2(Vbin) , w/o PDAF		
H: 1920		
V: 1080		
MIPI output setting*/
{0x0112, 0x0A},
{0x0113, 0x0A},
{0x0114, 0x03},
{0x0342, 0x41},
{0x0343, 0x40},//Frame Length Lines Setting
{0x0340, 0x04},
{0x0341, 0x90},//ROI Setting
{0x0344, 0x00},
{0x0345, 0x00},
{0x0346, 0x03},
{0x0347, 0x80},
{0x0348, 0x1F},
{0x0349, 0xFF},
{0x034A, 0x14},
{0x034B, 0x7F},//Mode Setting
{0x0900, 0x01},
{0x0901, 0x44},
{0x0902, 0x08},
{0x3005, 0x00},
{0x3120, 0x00},
{0x3121, 0x00},
{0x3200, 0x43},
{0x3201, 0x43},
{0x32D6, 0x00},//Digital Crop & Scaling
{0x0408, 0x00},
{0x0409, 0x40},
{0x040A, 0x00},
{0x040B, 0x04},
{0x040C, 0x07},
{0x040D, 0x80},
{0x040E, 0x04},
{0x040F, 0x38},//Output Size Setting
{0x034C, 0x07},
{0x034D, 0x80},
{0x034E, 0x04},
{0x034F, 0x38},//Clock Setting
{0x0301, 0x05},
{0x0303, 0x02},
{0x0305, 0x04},
{0x0306, 0x00},
{0x0307, 0xF4},
{0x030B, 0x04},
{0x030D, 0x03},
{0x030E, 0x01},
{0x030F, 0x84},//Other Setting
{0x30CB, 0x00},
{0x30CC, 0x10},
{0x30CD, 0x00},
{0x30CE, 0x03},
{0x30CF, 0x00},
{0x319C, 0x00},
{0x3800, 0x00},
{0x3801, 0x00},
{0x3802, 0x04},
{0x3847, 0x03},
{0x38B0, 0x00},
{0x38B1, 0x00},
{0x38B2, 0x00},
{0x38B3, 0x00},
{0x38C4, 0x00},
{0x38C5, 0x00},
{0x4C3A, 0x02},
{0x4C3B, 0xD2},
{0x4C68, 0x04},
{0x4C69, 0x7E},
{0x4CF8, 0x07},
{0x4CF9, 0x9E},
{0x4DB8, 0x08},
{0x4DB9, 0x98},//Integration Setting
{0x0202, 0x04},
{0x0203, 0x60},
{0x0224, 0x01},
{0x0225, 0xF4},
{0x313A, 0x01},
{0x313B, 0xF4},
{0x3803, 0x00},
{0x3804, 0x17},
{0x3805, 0xC0},//Gain Setting
{0x0204, 0x00},
{0x0205, 0x00},
{0x020E, 0x01},
{0x020F, 0x00},
{0x0216, 0x00},
{0x0217, 0x00},
{0x0218, 0x01},
{0x0219, 0x00},
{0x313C, 0x00},
{0x313D, 0x00},
{0x313E, 0x01},
{0x313F, 0x00},//PHASE PIX Setting
{0x30B4, 0x00},//PHASE PIX data type Setting
{0x3066, 0x00},
{0x3067, 0x30},
{0x3068, 0x00},
{0x3069, 0x30},//DOL Setting
{0x33D0, 0x00},
{0x33D1, 0x00},
{0x33D4, 0x01},
{0x33DC, 0x0A},
{0x33DD, 0x0A},
{0x33DE, 0x0A},
{0x33DF, 0x0A},//DOL data type Setting
{0x3070, 0x01},
{0x3077, 0x01},
{0x3078, 0x30},
{0x3079, 0x01},
{0x307A, 0x30},
{0x307B, 0x01},
{0x3080, 0x02},
{0x3087, 0x02},
{0x3088, 0x30},
{0x3089, 0x02},
{0x308A, 0x30},
{0x308B, 0x02},
{0x3901, 0x2B},
{0x3902, 0x00},
{0x3903, 0x12},
{0x3905, 0x2B},
{0x3906, 0x01},
{0x3907, 0x12},
{0x3909, 0x2B},
{0x390A, 0x02},
{0x390B, 0x12},
{0x3911, 0x00},

};
//#if 0
static const SENSOR_REG_T imx766_preview_setting[] = {
/*4Lane		
reg_B		
4096x3072@30fps, 2x2 Adjacent Pixel Binning , w/o PDAF		
H: 4096		
V: 3072		
MIPI output setting*/
{0x0112, 0x0A},
{0x0113, 0x0A},
{0x0114, 0x03},
{0x0342, 0x6C},
{0x0343, 0x00},//Frame Length Lines Setting
{0x0340, 0x0C},
{0x0341, 0x62},//ROI Setting
{0x0344, 0x00},
{0x0345, 0x00},
{0x0346, 0x00},
{0x0347, 0x00},
{0x0348, 0x1F},
{0x0349, 0xFF},
{0x034A, 0x17},
{0x034B, 0xFF},//Mode Setting
{0x0900, 0x01},
{0x0901, 0x22},
{0x0902, 0x08},
{0x3005, 0x00},
{0x3120, 0x00},
{0x3121, 0x01},
{0x3200, 0x41},
{0x3201, 0x41},
{0x32D6, 0x00},//Digital Crop & Scaling
{0x0408, 0x00},
{0x0409, 0x00},
{0x040A, 0x00},
{0x040B, 0x00},
{0x040C, 0x10},
{0x040D, 0x00},
{0x040E, 0x0C},
{0x040F, 0x00},//Output Size Setting
{0x034C, 0x10},
{0x034D, 0x00},
{0x034E, 0x0C},
{0x034F, 0x00},//Clock Setting
{0x0301, 0x05},
{0x0303, 0x02},
{0x0305, 0x04},
{0x0306, 0x01},
{0x0307, 0x12},
{0x030B, 0x04},
{0x030D, 0x03},
{0x030E, 0x02},
{0x030F, 0x0D},//Other Setting
{0x30CB, 0x00},
{0x30CC, 0x10},
{0x30CD, 0x00},
{0x30CE, 0x03},
{0x30CF, 0x00},
{0x319C, 0x00},
{0x3800, 0x00},
{0x3801, 0x00},
{0x3802, 0x04},
{0x3847, 0x03},
{0x38B0, 0x00},
{0x38B1, 0xC8},
{0x38B2, 0x00},
{0x38B3, 0xC8},
{0x38C4, 0x00},
{0x38C5, 0xAA},
{0x4C3A, 0x02},
{0x4C3B, 0xD2},
{0x4C68, 0x0D},
{0x4C69, 0x80},
{0x4CF8, 0x07},
{0x4CF9, 0x9E},
{0x4DB8, 0x08},
{0x4DB9, 0x98},//Integration Setting
{0x0202, 0x0C},
{0x0203, 0x32},
{0x0224, 0x01},
{0x0225, 0xF4},
{0x313A, 0x01},
{0x313B, 0xF4},
{0x3803, 0x00},
{0x3804, 0x17},
{0x3805, 0xC0},//Gain Setting
{0x0204, 0x00},
{0x0205, 0x00},
{0x020E, 0x01},
{0x020F, 0x00},
{0x0216, 0x00},
{0x0217, 0x00},
{0x0218, 0x01},
{0x0219, 0x00},
{0x313C, 0x00},
{0x313D, 0x00},
{0x313E, 0x01},
{0x313F, 0x00},//PHASE PIX Setting
{0x30B4, 0x00},//PHASE PIX data type Setting
{0x3066, 0x00},
{0x3067, 0x30},
{0x3068, 0x00},
{0x3069, 0x30},//DOL Setting
{0x33D0, 0x00},
{0x33D1, 0x00},
{0x33D4, 0x01},
{0x33DC, 0x0A},
{0x33DD, 0x0A},
{0x33DE, 0x0A},
{0x33DF, 0x0A},//DOL data type Setting
{0x3070, 0x01},
{0x3077, 0x01},
{0x3078, 0x30},
{0x3079, 0x01},
{0x307A, 0x30},
{0x307B, 0x01},
{0x3080, 0x02},
{0x3087, 0x02},
{0x3088, 0x30},
{0x3089, 0x02},
{0x308A, 0x30},
{0x308B, 0x02},
{0x3901, 0x2B},
{0x3902, 0x00},
{0x3903, 0x12},
{0x3905, 0x2B},
{0x3906, 0x01},
{0x3907, 0x12},
{0x3909, 0x2B},
{0x390A, 0x02},
{0x390B, 0x12},
{0x3911, 0x00},

};

static const SENSOR_REG_T imx766_snapshot_setting[] = {
/*4Lane		
reg_A		
full-size@10fps, w/ PDAF		
H: 8192		
V: 6144		
MIPI output setting*/
{0x0112, 0x0A},
{0x0113, 0x0A},
{0x0114, 0x03},
{0x0342, 0x6C},
{0x0343, 0x00},//Frame Length Lines Setting
{0x0340, 0x18},
{0x0341, 0xAE},//ROI Setting
{0x0344, 0x00},
{0x0345, 0x00},
{0x0346, 0x00},
{0x0347, 0x00},
{0x0348, 0x1F},
{0x0349, 0xFF},
{0x034A, 0x17},
{0x034B, 0xFF},//Mode Setting
{0x0900, 0x00},
{0x0901, 0x11},
{0x0902, 0x0A},
{0x3005, 0x00},
{0x3120, 0x00},
{0x3121, 0x01},
{0x3200, 0x00},
{0x3201, 0x00},
{0x32D6, 0x01},//Digital Crop & Scaling
{0x0408, 0x00},
{0x0409, 0x00},
{0x040A, 0x00},
{0x040B, 0x00},
{0x040C, 0x20},
{0x040D, 0x00},
{0x040E, 0x18},
{0x040F, 0x00},//Output Size Setting
{0x034C, 0x20},
{0x034D, 0x00},
{0x034E, 0x18},
{0x034F, 0x00},//Clock Setting
{0x0301, 0x05},
{0x0303, 0x02},
{0x0305, 0x04},
{0x0306, 0x00},
{0x0307, 0xB6},
{0x030B, 0x02},
{0x030D, 0x03},
{0x030E, 0x01},
{0x030F, 0x52},//Other Setting
{0x30CB, 0x00},
{0x30CC, 0x10},
{0x30CD, 0x00},
{0x30CE, 0x03},
{0x30CF, 0x00},
{0x319C, 0x00},
{0x3800, 0x00},
{0x3801, 0x00},
{0x3802, 0x04},
{0x3847, 0x00},
{0x38B0, 0x00},
{0x38B1, 0x00},
{0x38B2, 0x00},
{0x38B3, 0x00},
{0x38C4, 0x01},
{0x38C5, 0x7C},
{0x4C3A, 0x02},
{0x4C3B, 0xD2},
{0x4C68, 0x04},
{0x4C69, 0x7E},
{0x4CF8, 0x07},
{0x4CF9, 0x9E},
{0x4DB8, 0x08},
{0x4DB9, 0x98},//Integration Setting
{0x0202, 0x18},
{0x0203, 0x7E},
{0x0224, 0x01},
{0x0225, 0xF4},
{0x313A, 0x01},
{0x313B, 0xF4},
{0x3803, 0x01},
{0x3804, 0x55},
{0x3805, 0x90},//Gain Setting
{0x0204, 0x00},
{0x0205, 0x00},
{0x020E, 0x01},
{0x020F, 0x00},
{0x0216, 0x00},
{0x0217, 0x00},
{0x0218, 0x01},
{0x0219, 0x00},
{0x313C, 0x00},
{0x313D, 0x00},
{0x313E, 0x01},
{0x313F, 0x00},//PHASE PIX Setting
{0x30B4, 0x00},//PHASE PIX data type Setting
{0x3066, 0x00},
{0x3067, 0x30},
{0x3068, 0x00},
{0x3069, 0x30},//DOL Setting
{0x33D0, 0x00},
{0x33D1, 0x00},
{0x33D4, 0x01},
{0x33DC, 0x0A},
{0x33DD, 0x0A},
{0x33DE, 0x0A},
{0x33DF, 0x0A},//DOL data type Setting
{0x3070, 0x01},
{0x3077, 0x01},
{0x3078, 0x30},
{0x3079, 0x01},
{0x307A, 0x30},
{0x307B, 0x01},
{0x3080, 0x02},
{0x3087, 0x02},
{0x3088, 0x30},
{0x3089, 0x02},
{0x308A, 0x30},
{0x308B, 0x02},
{0x3901, 0x2B},
{0x3902, 0x00},
{0x3903, 0x12},
{0x3905, 0x2B},
{0x3906, 0x01},
{0x3907, 0x12},
{0x3909, 0x2B},
{0x390A, 0x02},
{0x390B, 0x12},
{0x3911, 0x00},

};
//#endif
static struct sensor_res_tab_info s_imx766_resolution_tab_raw[VENDOR_NUM] = {
    {.module_id = MODULE_SUNNY,
     .reg_tab =
         {{ADDR_AND_LEN_OF_ARRAY(imx766_init_setting), PNULL, 0, .width = 0,
           .height = 0, .xclk_to_sensor = EX_MCLK,
           .image_format = SENSOR_IMAGE_FORMAT_RAW},

          {ADDR_AND_LEN_OF_ARRAY(imx766_video_setting), PNULL, 0,
           .width = VIDEO_WIDTH, .height = VIDEO_HEIGHT,
           .xclk_to_sensor = EX_MCLK, .image_format = SENSOR_IMAGE_FORMAT_RAW},
//#if 0
          {ADDR_AND_LEN_OF_ARRAY(imx766_preview_setting), PNULL, 0,
           .width = PREVIEW_WIDTH, .height = PREVIEW_HEIGHT,
           .xclk_to_sensor = EX_MCLK, .image_format = SENSOR_IMAGE_FORMAT_RAW},

          {ADDR_AND_LEN_OF_ARRAY(imx766_snapshot_setting), PNULL, 0,
           .width = SNAPSHOT_WIDTH, .height = SNAPSHOT_HEIGHT,
           .xclk_to_sensor = EX_MCLK, .image_format = SENSOR_IMAGE_FORMAT_RAW}
//#endif
}}

    /*If there are multiple modules,please add here*/
};

static SENSOR_TRIM_T s_imx766_resolution_trim_tab[VENDOR_NUM] = {
    {.module_id = MODULE_SUNNY,
     .trim_info =
         {
             {0, 0, 0, 0, 0, 0, 0, {0, 0, 0, 0}},

             {.trim_start_x = VIDEO_TRIM_X,
              .trim_start_y = VIDEO_TRIM_Y,
              .trim_width = VIDEO_TRIM_W,
              .trim_height = VIDEO_TRIM_H,
              .line_time = VIDEO_LINE_TIME,
              .bps_per_lane = VIDEO_MIPI_PER_LANE_BPS,
              .frame_line = VIDEO_FRAME_LENGTH,
              .scaler_trim = {.x = VIDEO_TRIM_X,
                              .y = VIDEO_TRIM_Y,
                              .w = VIDEO_TRIM_W,
                              .h = VIDEO_TRIM_H}},
//#if 0
             {.trim_start_x = PREVIEW_TRIM_X,
              .trim_start_y = PREVIEW_TRIM_Y,
              .trim_width = PREVIEW_TRIM_W,
              .trim_height = PREVIEW_TRIM_H,
              .line_time = PREVIEW_LINE_TIME,
              .bps_per_lane = PREVIEW_MIPI_PER_LANE_BPS,
              .frame_line = PREVIEW_FRAME_LENGTH,
              .scaler_trim = {.x = PREVIEW_TRIM_X,
                              .y = PREVIEW_TRIM_Y,
                              .w = PREVIEW_TRIM_W,
                              .h = PREVIEW_TRIM_H}},

             {.trim_start_x = SNAPSHOT_TRIM_X,
              .trim_start_y = SNAPSHOT_TRIM_Y,
              .trim_width = SNAPSHOT_TRIM_W,
              .trim_height = SNAPSHOT_TRIM_H,
              .line_time = SNAPSHOT_LINE_TIME,
              .bps_per_lane = SNAPSHOT_MIPI_PER_LANE_BPS,
              .frame_line = SNAPSHOT_FRAME_LENGTH,
              .scaler_trim = {.x = SNAPSHOT_TRIM_X,
                              .y = SNAPSHOT_TRIM_Y,
                              .w = SNAPSHOT_TRIM_W,
                              .h = SNAPSHOT_TRIM_H}},
//#endif
	}}

    /*If there are multiple modules,please add here*/

};

static SENSOR_REG_T imx766_shutter_reg[] = {
    {0x0202, 0x0000}, {0x0203, 0x0000},
};

static struct sensor_i2c_reg_tab imx766_shutter_tab = {
    .settings = imx766_shutter_reg, .size = ARRAY_SIZE(imx766_shutter_reg),
};

static SENSOR_REG_T imx766_again_reg[] = {
    {0x0104, 0x0001}, {0x0204, 0x0000}, {0x0205, 0x0000}, {0x0104, 0x0000},
};

static struct sensor_i2c_reg_tab imx766_again_tab = {
    .settings = imx766_again_reg, .size = ARRAY_SIZE(imx766_again_reg),
};

static SENSOR_REG_T imx766_dgain_reg[] = {

};

static struct sensor_i2c_reg_tab imx766_dgain_tab = {
    .settings = imx766_dgain_reg, .size = ARRAY_SIZE(imx766_dgain_reg),
};

static SENSOR_REG_T imx766_frame_length_reg[] = {
    {0x0340, 0x0000}, {0x0341, 0x0000},
};

static struct sensor_i2c_reg_tab imx766_frame_length_tab = {
    .settings = imx766_frame_length_reg,
    .size = ARRAY_SIZE(imx766_frame_length_reg),
};

static struct sensor_aec_i2c_tag imx766_aec_info = {
    .slave_addr = (I2C_SLAVE_ADDR >> 1),
    .addr_bits_type = SENSOR_I2C_REG_16BIT,
    .data_bits_type = SENSOR_I2C_VAL_8BIT,
    .shutter = &imx766_shutter_tab,
    .again = &imx766_again_tab,
    .dgain = &imx766_dgain_tab,
    .frame_length = &imx766_frame_length_tab,
};
/*
static const cmr_u16 imx766_pd_is_right[] = {
    0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
    0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
};

static const cmr_u16 imx766_pd_row[] = {
    7,  7,  23, 23, 43, 43, 59, 59, 11, 11, 27, 27, 39, 39, 55, 55,
    11, 11, 27, 27, 39, 39, 55, 55, 7,  7,  23, 23, 43, 43, 59, 59};

static const cmr_u16 imx766_pd_col[] = {
    0,  4,  4,  8,  4,  8,  0,  4,  20, 16, 24, 20, 24, 20, 20, 16,
    36, 40, 32, 36, 32, 36, 36, 40, 56, 52, 52, 48, 52, 48, 56, 52};

 */
static SENSOR_STATIC_INFO_T s_imx766_static_info[VENDOR_NUM] = {
    {.module_id = MODULE_SUNNY,
     .static_info = {.f_num = 200,
                     .focal_length = 354,
                     .max_fps = 30,
                     .max_adgain = 8,
                     .ois_supported = 0,
                     .pdaf_supported = 2,
                     .exp_valid_frame_num = 1,
                     .clamp_level = 64,
                     .adgain_valid_frame_num = 0,
                     .fov_info = {{4.614f, 3.444f}, 4.222f}}}
    /*If there are multiple modules,please add here*/
};

static SENSOR_MODE_FPS_INFO_T s_imx766_mode_fps_info[VENDOR_NUM] = {
    {.module_id = MODULE_SUNNY,
     {.is_init = 0,
      {{SENSOR_MODE_COMMON_INIT, 0, 1, 0, 0},
       {SENSOR_MODE_PREVIEW_ONE, 0, 1, 0, 0},
       {SENSOR_MODE_SNAPSHOT_ONE_FIRST, 0, 1, 0, 0},
       {SENSOR_MODE_SNAPSHOT_ONE_SECOND, 0, 1, 0, 0},
       {SENSOR_MODE_SNAPSHOT_ONE_THIRD, 0, 1, 0, 0},
       {SENSOR_MODE_PREVIEW_TWO, 0, 1, 0, 0},
       {SENSOR_MODE_SNAPSHOT_TWO_FIRST, 0, 1, 0, 0},
       {SENSOR_MODE_SNAPSHOT_TWO_SECOND, 0, 1, 0, 0},
       {SENSOR_MODE_SNAPSHOT_TWO_THIRD, 0, 1, 0, 0}}}}
    /*If there are multiple modules,please add here*/
};

static struct sensor_module_info s_imx766_module_info_tab[VENDOR_NUM] = {
    {.module_id = MODULE_SUNNY,
     .module_info = {.major_i2c_addr = 0x20 >> 1,
                     .minor_i2c_addr = 0x34 >> 1,
                     .i2c_burst_mode = SENSOR_I2C_BURST_REG16_VAL8,

                     .reg_addr_value_bits = SENSOR_I2C_REG_16BIT |
                                            SENSOR_I2C_VAL_8BIT |
                                            SENSOR_I2C_FREQ_400,

                     .avdd_val = SENSOR_AVDD_2800MV,
                     .iovdd_val = SENSOR_AVDD_1800MV,
                     .dvdd_val = SENSOR_AVDD_1100MV,

                     .image_pattern = SENSOR_IMAGE_PATTERN_RAWRGB_R,

                     .preview_skip_num = 1,
                     .capture_skip_num = 2,
                     .flash_capture_skip_num = 6,
                     .mipi_cap_skip_num = 0,
                     .preview_deci_num = 0,
                     .video_preview_deci_num = 0,

                     .threshold_eb = 0,
                     .threshold_mode = 0,
                     .threshold_start = 0,
                     .threshold_end = 0,

                     .sensor_interface =
                         {
                             .type = SENSOR_INTERFACE_TYPE_CSI2,
                             .bus_width = LANE_NUM,
                             .pixel_width = RAW_BITS,
                             .is_loose = 0,

                         },
                     .change_setting_skip_num = 1,
                     .horizontal_view_angle = 65,
                     .vertical_view_angle = 60}}

    /*If there are multiple modules,please add here*/
};

static struct sensor_ic_ops s_imx766_ops_tab;
struct sensor_raw_info *s_imx766_mipi_raw_info_ptr =
    PNULL; //&s_imx766_mipi_raw_info;

/*==============================================================================
 * Description:
 * sensor all info
 * please modify this variable acording your spec
 *============================================================================*/
SENSOR_INFO_T g_imx766_mipi_raw_info = {
    .hw_signal_polarity = SENSOR_HW_SIGNAL_PCLK_P | SENSOR_HW_SIGNAL_VSYNC_P |
                          SENSOR_HW_SIGNAL_HSYNC_P,
    .environment_mode = SENSOR_ENVIROMENT_NORMAL | SENSOR_ENVIROMENT_NIGHT,
    .image_effect = SENSOR_IMAGE_EFFECT_NORMAL |
                    SENSOR_IMAGE_EFFECT_BLACKWHITE | SENSOR_IMAGE_EFFECT_RED |
                    SENSOR_IMAGE_EFFECT_GREEN | SENSOR_IMAGE_EFFECT_BLUE |
                    SENSOR_IMAGE_EFFECT_YELLOW | SENSOR_IMAGE_EFFECT_NEGATIVE |
                    SENSOR_IMAGE_EFFECT_CANVAS,

    .wb_mode = 0,
    .step_count = 7,
    .reset_pulse_level = SENSOR_LOW_PULSE_RESET,
    .reset_pulse_width = 50,
    .power_down_level = SENSOR_LOW_LEVEL_PWDN,
    .identify_count = 1,
    .identify_code = {{.reg_addr = imx766_PID_ADDR,
                       .reg_value = imx766_PID_VALUE},
                      {.reg_addr = imx766_VER_ADDR,
                       .reg_value = imx766_VER_VALUE}},

    .source_width_max = SNAPSHOT_WIDTH,
    .source_height_max = SNAPSHOT_HEIGHT,
    .name = (cmr_s8 *)SENSOR_NAME,
    .image_format = SENSOR_IMAGE_FORMAT_RAW,

    .module_info_tab = s_imx766_module_info_tab,
    .module_info_tab_size = ARRAY_SIZE(s_imx766_module_info_tab),

    .resolution_tab_info_ptr = s_imx766_resolution_tab_raw,
    .sns_ops = &s_imx766_ops_tab,
    .raw_info_ptr = &s_imx766_mipi_raw_info_ptr,

    .video_tab_info_ptr = NULL,
    .sensor_version_info = (cmr_s8 *)"imx766_v1",
};

#endif
