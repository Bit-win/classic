/*
 * SPDX-FileCopyrightText: 2022 Unisoc (Shanghai) Technologies Co., Ltd
 * SPDX-License-Identifier: LicenseRef-Unisoc-General-1.0
 *
 * Copyright 2022 Unisoc (Shanghai) Technologies Co., Ltd.
 * Licensed under the Unisoc General Software License, version 1.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * https://www.unisoc.com/en_us/license/UNISOC_GENERAL_LICENSE_V1.0-EN_US
 * Software distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OF ANY KIND, either express or implied.
 * See the Unisoc General Software License, version 1.0 for more details.
 */
/*History
*Date                  Modification                                 Reason
*
*/

#ifndef _SENSOR_ov32d40_MIPI_RAW_H_
#define _SENSOR_ov32d40_MIPI_RAW_H_

#include <utils/Log.h>
#include "sensor.h"
#include "jpeg_exif_header.h"
#include "sensor_drv_u.h"
#include "sensor_raw.h"

//#include "parameters/parameters_sharkl5/sensor_ov32d40_raw_param_main.c"

#define VENDOR_NUM 1
#define SENSOR_NAME "c3z01_ov32d40_backxl"

#define MAJOR_I2C_SLAVE_ADDR 0x20
#define MINOR_I2C_SLAVE_ADDR 0x6C

#define ov32d40_PID_ADDR 0x300B
#define ov32d40_PID_VALUE 0x32
#define ov32d40_VER_ADDR 0x300C
#define ov32d40_VER_VALUE 0x44

/* sensor parameters begin */

/* effective sensor output image size */
#define VIDEO_WIDTH 3264
#define VIDEO_HEIGHT 1836
#define PREVIEW_WIDTH 3264
#define PREVIEW_HEIGHT 2448
#define SNAPSHOT_WIDTH 3264
#define SNAPSHOT_HEIGHT 2448
#define SENSORMAX_WIDTH 6528
#define SENSORMAX_HEIGHT 4896
#define SUPPORT_4IN1 1

/*Raw Trim parameters*/
#define VIDEO_TRIM_X 0
#define VIDEO_TRIM_Y 0
#define VIDEO_TRIM_W 3264
#define VIDEO_TRIM_H 1836
#define PREVIEW_TRIM_X 0
#define PREVIEW_TRIM_Y 0
#define PREVIEW_TRIM_W 3264
#define PREVIEW_TRIM_H 2448
#define SNAPSHOT_TRIM_X 0
#define SNAPSHOT_TRIM_Y 0
#define SNAPSHOT_TRIM_W 3264
#define SNAPSHOT_TRIM_H 2448

/*Mipi output*/
#define LANE_NUM 4
#define RAW_BITS 10

#define VIDEO_MIPI_PER_LANE_BPS 1200
#define PREVIEW_MIPI_PER_LANE_BPS 1200
#define SNAPSHOT_MIPI_PER_LANE_BPS 1200

/*line time unit: 1ns*/
#define VIDEO_LINE_TIME 11820
#define PREVIEW_LINE_TIME 11820
#define SNAPSHOT_LINE_TIME 11820

/* frame length*/
#define VIDEO_FRAME_LENGTH 2820
#define PREVIEW_FRAME_LENGTH 2820
#define SNAPSHOT_FRAME_LENGTH 2820

/* please ref your spec */
#define FRAME_OFFSET 4
#define SENSOR_MAX_GAIN 0x3e00
#define SENSOR_MIN_GAIN 0x0120//SENSOR_BASE_GAIN*1.125
#define SENSOR_BASE_GAIN 0x0100
#define SENSOR_MIN_SHUTTER 4

/* please ref your spec
 * 1 : average binning
 * 2 : sum-average binning
 * 4 : sum binning
 */
#define BINNING_FACTOR 1

/* please ref spec
 * 1: sensor auto caculate
 * 0: driver caculate
 */
/* sensor parameters end */

/* isp parameters, please don't change it*/
#define ISP_BASE_GAIN 0x80

/* please don't change it */
#define EX_MCLK 24

/*==============================================================================
 * Description:
 * register setting
 *============================================================================*/
//#define IMAGE_V_MIRROR

//#define IMAGE_V_MIRROR //IMAGE_NORMAL_MIRROR; IMAGE_H_MIRROR; IMAGE_V_MIRROR;
// IMAGE_HV_MIRROR

static const SENSOR_REG_T ov32d40_init_setting[] = {
// Initial setting 
// PDC settings(0x5a20 - 0x5be1) settings total 450bytes need to be rewrite based on module PDC calibration 
{0x0103, 0x01},
{0x1001, 0x04},
{0xffff, 0x01},//delay 1ms by FAE
{0x0102, 0x01},
{0x032e, 0x02},
{0x0360, 0x01},
{0x1003, 0x01},
{0x1216, 0x00},
{0x1217, 0x00},
{0x1218, 0x00},
{0x3025, 0x89},
{0x3026, 0x00},
{0x3027, 0x01},
{0x3029, 0x00},
{0x3400, 0x1c},
{0x3401, 0x80},
{0x3403, 0x4a},
{0x3405, 0xc0},
{0x3406, 0x8f},
{0x3408, 0xc0},
{0x3409, 0x8f},
{0x3441, 0x6a},
{0x3504, 0x4c},
{0x3509, 0x20},
{0x3544, 0x4c},
{0x3549, 0x20},
{0x3601, 0x24},
{0x3602, 0x09},
{0x3603, 0x24},
{0x3608, 0x0c},
{0x3610, 0x78},
{0x3626, 0x18},
{0x3682, 0x80},
{0x3696, 0xd1},
{0x3729, 0x7c},
{0x37c0, 0x0c},
{0x3828, 0x00},
{0x382a, 0x80},
{0x383a, 0x01},
{0x3901, 0xc0},
{0x3903, 0x1f},
{0x3904, 0x1f},
{0x3905, 0x1f},
{0x3906, 0x1f},
{0x3907, 0x1f},
{0x3908, 0x1f},
{0x3909, 0x1f},
{0x390a, 0x14},
{0x390b, 0x14},
{0x390c, 0x14},
{0x390d, 0x14},
{0x390e, 0x14},
{0x390f, 0x14},
{0x3910, 0x14},
{0x3911, 0x05},
{0x3912, 0x05},
{0x3913, 0x05},
{0x3914, 0x05},
{0x3915, 0x05},
{0x3916, 0x05},
{0x3917, 0x05},
{0x3918, 0x44},
{0x3919, 0x34},
{0x391a, 0x33},
{0x391d, 0x0f},
{0x3927, 0xc8},
{0x3928, 0x01},
{0x3929, 0x68},
{0x3934, 0x2f},
{0x3935, 0x2e},
{0x3936, 0x2d},
{0x3937, 0x2d},
{0x3938, 0x2c},
{0x3939, 0x2c},
{0x393a, 0x2a},
{0x393b, 0x2b},
{0x393c, 0x2c},
{0x393d, 0x2c},
{0x393e, 0x2d},
{0x393f, 0x2d},
{0x3940, 0x2d},
{0x3941, 0x2d},
{0x3947, 0x1d},
{0x3948, 0x1d},
{0x3949, 0x1e},
{0x394a, 0x1c},
{0x394b, 0x1f},
{0x394c, 0x1e},
{0x394d, 0x1f},
{0x394e, 0x13},
{0x394f, 0x26},
{0x3950, 0x48},
{0x3951, 0x8b},
{0x3952, 0x8c},
{0x3953, 0x8c},
{0x3954, 0x8a},
{0x3967, 0x17},
{0x3968, 0x17},
{0x3969, 0x0d},
{0x396a, 0x0d},
{0x396b, 0x0c},
{0x396c, 0x0c},
{0x396d, 0x13},
{0x396e, 0x1c},
{0x396f, 0x0e},
{0x3970, 0x10},
{0x3971, 0x0a},
{0x3972, 0x0b},
{0x3973, 0x07},
{0x3974, 0x07},
{0x3a11, 0x14},
{0x3a1a, 0x0e},
{0x3a1f, 0x8c},
{0x3a20, 0x22},
{0x3a26, 0x9f},
{0x3a28, 0xf0},
{0x3a29, 0x41},
{0x3a48, 0x0a},
{0x3a49, 0x8d},
{0x3a4a, 0xbb},
{0x3a4b, 0xf6},
{0x3a61, 0x29},
{0x3a6a, 0x8d},
{0x3a6c, 0xf1},
{0x3a6d, 0xbb},
{0x3a6e, 0x8d},
{0x3a70, 0xf1},
{0x3a71, 0xbb},
{0x3a86, 0xbb},
{0x3a8a, 0xbb},
{0x3a8e, 0x00},
{0x3a8f, 0x00},
{0x3aaf, 0x2f},
{0x3ab3, 0x37},
{0x3ab7, 0x48},
{0x3abb, 0x48},
{0x3abf, 0x48},
{0x3ac3, 0x48},
{0x3ac7, 0x48},
{0x3acb, 0x2f},
{0x3acf, 0x37},
{0x3ae7, 0x2d},
{0x3aec, 0xc3},
{0x3aed, 0xce},
{0x3b1a, 0x8b},
{0x3b1c, 0xe5},
{0x3b22, 0x8b},
{0x3b24, 0xe4},
{0x3b2a, 0x8b},
{0x3b2c, 0xe5},
{0x3b32, 0x88},
{0x3b34, 0xe0},
{0x3b3a, 0x7f},
{0x3b3c, 0xd5},
{0x3b42, 0x7f},
{0x3b44, 0xd5},
{0x3b83, 0x8d},
{0x3b84, 0xbb},
{0x3bc2, 0x8b},
{0x3bc4, 0xe5},
{0x3bca, 0x8b},
{0x3bcc, 0xe4},
{0x3bd2, 0x8b},
{0x3bd4, 0xe5},
{0x3bda, 0x88},
{0x3bdc, 0xe0},
{0x3be2, 0x7f},
{0x3be4, 0xd5},
{0x3bea, 0x7f},
{0x3bec, 0xd5},
{0x3d8d, 0xe7},
{0x3f00, 0x02},
{0x4010, 0xf5},
{0x4015, 0x00},
{0x4018, 0x0d},
{0x403f, 0x80},
{0x4042, 0x00},
{0x4045, 0x80},
{0x4046, 0x00},
{0x4047, 0x80},
{0x40ea, 0x00},
{0x40ed, 0x80},
{0x40ee, 0x00},
{0x4509, 0x15},
{0x4549, 0x00},
{0x4680, 0xb1},
{0x4684, 0x19},
{0x4813, 0x6c},
{0x481f, 0x27},//default 0x26
{0x4883, 0x01},
{0x4a3f, 0x80},
{0x4a42, 0x00},
{0x4a45, 0x80},
{0x4a46, 0x00},
{0x4a47, 0x80},
{0x4aea, 0x00},
{0x4aed, 0x80},
{0x4aee, 0x00},
{0x4d00, 0x03},
{0x4d01, 0xa9},
{0x4d02, 0xbd},
{0x4d03, 0x31},
{0x4d04, 0x5f},
{0x4d05, 0xdc},
{0x5000, 0x35},
{0x5055, 0x10},
{0x5056, 0x0c},
{0x5059, 0x10},
{0x505a, 0x09},
{0x505b, 0x90},
{0x505c, 0x08},
{0x505d, 0x08},
{0x505e, 0x02},
{0x505f, 0x02},
{0x5060, 0x06},
{0x5061, 0x06},
{0x5062, 0x02},
{0x5063, 0x02},
{0x5064, 0x06},
{0x5065, 0x06},
{0x5066, 0x10},
{0x5068, 0x0a},
{0x5151, 0x14},
{0x5152, 0x01},
{0x5153, 0x53},
{0x5194, 0x0c},
{0x5195, 0x0c},
{0x5196, 0x0c},
{0x5197, 0x0c},
{0x5198, 0x0c},
{0x5199, 0x0c},
{0x519a, 0x0c},
{0x519b, 0x0c},
{0x5244, 0x00},
{0x5245, 0x50},
{0x5246, 0x00},
{0x5247, 0x50},
{0x5248, 0x00},
{0x5249, 0x50},
{0x524a, 0x00},
{0x524b, 0x50},
{0x524c, 0x00},
{0x524d, 0x50},
{0x524e, 0x00},
{0x524f, 0x50},
{0x5250, 0x00},
{0x5251, 0x50},
{0x5252, 0x00},
{0x5253, 0x50},
{0x52a0, 0x02},
{0x52a1, 0x08},
{0x52a2, 0x07},
{0x52a3, 0x09},
{0x52a4, 0x0a},
{0x52a5, 0x01},
{0x52a6, 0x04},
{0x52a7, 0x03},
{0x52a8, 0x05},
{0x52a9, 0x06},
{0x52c1, 0xe8},
{0x5320, 0xf8},
{0x5322, 0xff},
{0x5323, 0x0c},
{0x5651, 0x14},
{0x5652, 0x01},
{0x5653, 0x53},
{0x5694, 0x0c},
{0x5695, 0x0c},
{0x5696, 0x0c},
{0x5697, 0x0c},
{0x5698, 0x0c},
{0x5699, 0x0c},
{0x569a, 0x0c},
{0x569b, 0x0c},
{0x5744, 0x00},
{0x5745, 0x50},
{0x5746, 0x00},
{0x5747, 0x50},
{0x5748, 0x00},
{0x5749, 0x50},
{0x574a, 0x00},
{0x574b, 0x50},
{0x574c, 0x00},
{0x574d, 0x50},
{0x574e, 0x00},
{0x574f, 0x50},
{0x5750, 0x00},
{0x5751, 0x50},
{0x5752, 0x00},
{0x5753, 0x50},
{0x57a0, 0x02},
{0x57a1, 0x08},
{0x57a2, 0x07},
{0x57a3, 0x09},
{0x57a4, 0x0a},
{0x57a5, 0x01},
{0x57a6, 0x04},
{0x57a7, 0x03},
{0x57a8, 0x05},
{0x57a9, 0x06},
{0x57c1, 0xe8},
{0x5820, 0xf8},
{0x5822, 0xff},
{0x5823, 0x0c},
{0x6003, 0x00},
// below PDC settings need to be rewrite based on module PDC calibration
{0x5a20, 0x40},
{0x5a21, 0x40},
{0x5a22, 0x40},
{0x5a23, 0x40},
{0x5a24, 0x40},
{0x5a25, 0x40},
{0x5a26, 0x40},
{0x5a27, 0x40},
{0x5a28, 0x40},
{0x5a29, 0x40},
{0x5a2a, 0x40},
{0x5a2b, 0x40},
{0x5a2c, 0x40},
{0x5a2d, 0x40},
{0x5a2e, 0x40},
{0x5a2f, 0x40},
{0x5a30, 0x40},
{0x5a31, 0x40},
{0x5a32, 0x40},
{0x5a33, 0x40},
{0x5a34, 0x40},
{0x5a35, 0x40},
{0x5a36, 0x40},
{0x5a37, 0x40},
{0x5a38, 0x40},
{0x5a39, 0x40},
{0x5a3a, 0x40},
{0x5a3b, 0x40},
{0x5a3c, 0x40},
{0x5a3d, 0x40},
{0x5a3e, 0x40},
{0x5a3f, 0x40},
{0x5a40, 0x40},
{0x5a41, 0x40},
{0x5a42, 0x40},
{0x5a43, 0x40},
{0x5a44, 0x40},
{0x5a45, 0x40},
{0x5a46, 0x40},
{0x5a47, 0x40},
{0x5a48, 0x40},
{0x5a49, 0x40},
{0x5a4a, 0x40},
{0x5a4b, 0x40},
{0x5a4c, 0x40},
{0x5a4d, 0x40},
{0x5a4e, 0x40},
{0x5a4f, 0x40},
{0x5a50, 0x40},
{0x5a51, 0x40},
{0x5a52, 0x40},
{0x5a53, 0x40},
{0x5a54, 0x40},
{0x5a55, 0x40},
{0x5a56, 0x40},
{0x5a57, 0x40},
{0x5a58, 0x40},
{0x5a59, 0x40},
{0x5a5a, 0x40},
{0x5a5b, 0x40},
{0x5a5c, 0x40},
{0x5a5d, 0x40},
{0x5a5e, 0x40},
{0x5a5f, 0x40},
{0x5a60, 0x40},
{0x5a61, 0x40},
{0x5a62, 0x40},
{0x5a63, 0x40},
{0x5a64, 0x40},
{0x5a65, 0x40},
{0x5a66, 0x40},
{0x5a67, 0x40},
{0x5a68, 0x40},
{0x5a69, 0x40},
{0x5a6a, 0x40},
{0x5a6b, 0x40},
{0x5a6c, 0x40},
{0x5a6d, 0x40},
{0x5a6e, 0x40},
{0x5a6f, 0x40},
{0x5a70, 0x40},
{0x5a71, 0x40},
{0x5a72, 0x40},
{0x5a73, 0x40},
{0x5a74, 0x40},
{0x5a75, 0x40},
{0x5a76, 0x40},
{0x5a77, 0x40},
{0x5a78, 0x40},
{0x5a79, 0x40},
{0x5a7a, 0xcd},
{0x5a7b, 0xcd},
{0x5a7c, 0xcd},
{0x5a7d, 0xcd},
{0x5a7e, 0xcd},
{0x5a7f, 0xcd},
{0x5a80, 0xcd},
{0x5a81, 0xcd},
{0x5a82, 0xcd},
{0x5a83, 0xcd},
{0x5a84, 0xcd},
{0x5a85, 0xcd},
{0x5a86, 0xcd},
{0x5a87, 0xcd},
{0x5a88, 0xcd},
{0x5a89, 0xcd},
{0x5a8a, 0xcd},
{0x5a8b, 0xcd},
{0x5a8c, 0xcd},
{0x5a8d, 0xcd},
{0x5a8e, 0xcd},
{0x5a8f, 0xcd},
{0x5a90, 0xcd},
{0x5a91, 0xcd},
{0x5a92, 0xcd},
{0x5a93, 0xcd},
{0x5a94, 0xcd},
{0x5a95, 0xcd},
{0x5a96, 0xcd},
{0x5a97, 0xcd},
{0x5a98, 0xcd},
{0x5a99, 0xcd},
{0x5a9a, 0xcd},
{0x5a9b, 0xcd},
{0x5a9c, 0xcd},
{0x5a9d, 0xcd},
{0x5a9e, 0xcd},
{0x5a9f, 0xcd},
{0x5aa0, 0xcd},
{0x5aa1, 0xcd},
{0x5aa2, 0xcd},
{0x5aa3, 0xcd},
{0x5aa4, 0xcd},
{0x5aa5, 0xcd},
{0x5aa6, 0xcd},
{0x5aa7, 0xcd},
{0x5aa8, 0xcd},
{0x5aa9, 0xcd},
{0x5aaa, 0xcd},
{0x5aab, 0xcd},
{0x5aac, 0xcd},
{0x5aad, 0xcd},
{0x5aae, 0xcd},
{0x5aaf, 0xcd},
{0x5ab0, 0xcd},
{0x5ab1, 0xcd},
{0x5ab2, 0xcd},
{0x5ab3, 0xcd},
{0x5ab4, 0xcd},
{0x5ab5, 0xcd},
{0x5ab6, 0xcd},
{0x5ab7, 0xcd},
{0x5ab8, 0xcd},
{0x5ab9, 0xcd},
{0x5aba, 0xcd},
{0x5abb, 0xcd},
{0x5abc, 0xcd},
{0x5abd, 0xcd},
{0x5abe, 0xcd},
{0x5abf, 0xcd},
{0x5ac0, 0xcd},
{0x5ac1, 0xcd},
{0x5ac2, 0xcd},
{0x5ac3, 0xcd},
{0x5ac4, 0xcd},
{0x5ac5, 0xcd},
{0x5ac6, 0xcd},
{0x5ac7, 0xcd},
{0x5ac8, 0xcd},
{0x5ac9, 0xcd},
{0x5aca, 0xcd},
{0x5acb, 0xcd},
{0x5acc, 0xcd},
{0x5acd, 0xcd},
{0x5ace, 0xcd},
{0x5acf, 0xcd},
{0x5ad0, 0xcd},
{0x5ad1, 0xcd},
{0x5ad2, 0xcd},
{0x5ad3, 0xcd},
{0x5ad4, 0xcd},
{0x5ad5, 0xcd},
{0x5ad6, 0xcd},
{0x5ad7, 0xcd},
{0x5ad8, 0xcd},
{0x5ad9, 0xcd},
{0x5ada, 0xcd},
{0x5adb, 0xcd},
{0x5adc, 0xcd},
{0x5add, 0xcd},
{0x5ade, 0xcd},
{0x5adf, 0xcd},
{0x5ae0, 0xcd},
{0x5ae1, 0xcd},
{0x5ae2, 0xcd},
{0x5ae3, 0xcd},
{0x5ae4, 0xcd},
{0x5ae5, 0xcd},
{0x5ae6, 0xcd},
{0x5ae7, 0xcd},
{0x5ae8, 0xcd},
{0x5ae9, 0xcd},
{0x5aea, 0xcd},
{0x5aeb, 0xcd},
{0x5aec, 0xcd},
{0x5aed, 0xcd},
{0x5aee, 0xcd},
{0x5aef, 0xcd},
{0x5af0, 0xcd},
{0x5af1, 0xcd},
{0x5af2, 0xcd},
{0x5af3, 0xcd},
{0x5af4, 0xcd},
{0x5af5, 0xcd},
{0x5af6, 0xcd},
{0x5af7, 0xcd},
{0x5af8, 0xcd},
{0x5af9, 0xcd},
{0x5afa, 0xcd},
{0x5afb, 0xcd},
{0x5afc, 0xcd},
{0x5afd, 0xcd},
{0x5afe, 0xcd},
{0x5aff, 0xcd},
{0x5b00, 0xcd},
{0x5b01, 0xcd},
{0x5b02, 0xcd},
{0x5b03, 0xcd},
{0x5b04, 0xcd},
{0x5b05, 0xcd},
{0x5b06, 0xcd},
{0x5b07, 0xcd},
{0x5b08, 0xcd},
{0x5b09, 0xcd},
{0x5b0a, 0xcd},
{0x5b0b, 0xcd},
{0x5b0c, 0xcd},
{0x5b0d, 0xcd},
{0x5b0e, 0xcd},
{0x5b0f, 0xcd},
{0x5b10, 0xcd},
{0x5b11, 0xcd},
{0x5b12, 0xcd},
{0x5b13, 0xcd},
{0x5b14, 0xcd},
{0x5b15, 0xcd},
{0x5b16, 0xcd},
{0x5b17, 0xcd},
{0x5b18, 0xcd},
{0x5b19, 0xcd},
{0x5b1a, 0xcd},
{0x5b1b, 0xcd},
{0x5b1c, 0xcd},
{0x5b1d, 0xcd},
{0x5b1e, 0xcd},
{0x5b1f, 0xcd},
{0x5b20, 0xcd},
{0x5b21, 0xcd},
{0x5b22, 0xcd},
{0x5b23, 0xcd},
{0x5b24, 0xcd},
{0x5b25, 0xcd},
{0x5b26, 0xcd},
{0x5b27, 0xcd},
{0x5b28, 0xcd},
{0x5b29, 0xcd},
{0x5b2a, 0xcd},
{0x5b2b, 0xcd},
{0x5b2c, 0xcd},
{0x5b2d, 0xcd},
{0x5b2e, 0xcd},
{0x5b2f, 0xcd},
{0x5b30, 0xcd},
{0x5b31, 0xcd},
{0x5b32, 0xcd},
{0x5b33, 0xcd},
{0x5b34, 0xcd},
{0x5b35, 0xcd},
{0x5b36, 0xcd},
{0x5b37, 0xcd},
{0x5b38, 0xcd},
{0x5b39, 0xcd},
{0x5b3a, 0xcd},
{0x5b3b, 0xcd},
{0x5b3c, 0xcd},
{0x5b3d, 0xcd},
{0x5b3e, 0xcd},
{0x5b3f, 0xcd},
{0x5b40, 0xcd},
{0x5b41, 0xcd},
{0x5b42, 0xcd},
{0x5b43, 0xcd},
{0x5b44, 0xcd},
{0x5b45, 0xcd},
{0x5b46, 0xcd},
{0x5b47, 0xcd},
{0x5b48, 0xcd},
{0x5b49, 0xcd},
{0x5b4a, 0xcd},
{0x5b4b, 0xcd},
{0x5b4c, 0xcd},
{0x5b4d, 0xcd},
{0x5b4e, 0xcd},
{0x5b4f, 0xcd},
{0x5b50, 0xcd},
{0x5b51, 0xcd},
{0x5b52, 0xcd},
{0x5b53, 0xcd},
{0x5b54, 0xcd},
{0x5b55, 0xcd},
{0x5b56, 0xcd},
{0x5b57, 0xcd},
{0x5b58, 0xcd},
{0x5b59, 0xcd},
{0x5b5a, 0xcd},
{0x5b5b, 0xcd},
{0x5b5c, 0xcd},
{0x5b5d, 0xcd},
{0x5b5e, 0xcd},
{0x5b5f, 0xcd},
{0x5b60, 0xcd},
{0x5b61, 0xcd},
{0x5b62, 0xcd},
{0x5b63, 0xcd},
{0x5b64, 0xcd},
{0x5b65, 0xcd},
{0x5b66, 0xcd},
{0x5b67, 0xcd},
{0x5b68, 0xcd},
{0x5b69, 0xcd},
{0x5b6a, 0xcd},
{0x5b6b, 0xcd},
{0x5b6c, 0xcd},
{0x5b6d, 0xcd},
{0x5b6e, 0xcd},
{0x5b6f, 0xcd},
{0x5b70, 0xcd},
{0x5b71, 0xcd},
{0x5b72, 0xcd},
{0x5b73, 0xcd},
{0x5b74, 0xcd},
{0x5b75, 0xcd},
{0x5b76, 0xcd},
{0x5b77, 0xcd},
{0x5b78, 0xcd},
{0x5b79, 0xcd},
{0x5b7a, 0xcd},
{0x5b7b, 0xcd},
{0x5b7c, 0xcd},
{0x5b7d, 0xcd},
{0x5b7e, 0xcd},
{0x5b7f, 0xcd},
{0x5b80, 0xcd},
{0x5b81, 0xcd},
{0x5b82, 0xcd},
{0x5b83, 0xcd},
{0x5b84, 0xcd},
{0x5b85, 0xcd},
{0x5b86, 0xcd},
{0x5b87, 0xcd},
{0x5b88, 0xcd},
{0x5b89, 0xcd},
{0x5b8a, 0xcd},
{0x5b8b, 0xcd},
{0x5b8c, 0xcd},
{0x5b8d, 0xcd},
{0x5b8e, 0xcd},
{0x5b8f, 0xcd},
{0x5b90, 0xcd},
{0x5b91, 0xcd},
{0x5b92, 0xcd},
{0x5b93, 0xcd},
{0x5b94, 0xcd},
{0x5b95, 0xcd},
{0x5b96, 0xcd},
{0x5b97, 0xcd},
{0x5b98, 0xcd},
{0x5b99, 0xcd},
{0x5b9a, 0xcd},
{0x5b9b, 0xcd},
{0x5b9c, 0xcd},
{0x5b9d, 0xcd},
{0x5b9e, 0xcd},
{0x5b9f, 0xcd},
{0x5ba0, 0xcd},
{0x5ba1, 0xcd},
{0x5ba2, 0xcd},
{0x5ba3, 0xcd},
{0x5ba4, 0xcd},
{0x5ba5, 0xcd},
{0x5ba6, 0xcd},
{0x5ba7, 0xcd},
{0x5ba8, 0xcd},
{0x5ba9, 0xcd},
{0x5baa, 0xcd},
{0x5bab, 0xcd},
{0x5bac, 0xcd},
{0x5bad, 0xcd},
{0x5bae, 0xcd},
{0x5baf, 0xcd},
{0x5bb0, 0xcd},
{0x5bb1, 0xcd},
{0x5bb2, 0xcd},
{0x5bb3, 0xcd},
{0x5bb4, 0xcd},
{0x5bb5, 0xcd},
{0x5bb6, 0xcd},
{0x5bb7, 0xcd},
{0x5bb8, 0xcd},
{0x5bb9, 0xcd},
{0x5bba, 0xcd},
{0x5bbb, 0xcd},
{0x5bbc, 0xcd},
{0x5bbd, 0xcd},
{0x5bbe, 0xcd},
{0x5bbf, 0xcd},
{0x5bc0, 0xcd},
{0x5bc1, 0xcd},
{0x5bc2, 0xcd},
{0x5bc3, 0xcd},
{0x5bc4, 0xcd},
{0x5bc5, 0xcd},
{0x5bc6, 0xcd},
{0x5bc7, 0xcd},
{0x5bc8, 0xcd},
{0x5bc9, 0xcd},
{0x5bca, 0xcd},
{0x5bcb, 0xcd},
{0x5bcc, 0xcd},
{0x5bcd, 0xcd},
{0x5bce, 0xcd},
{0x5bcf, 0xcd},
{0x5bd0, 0xcd},
{0x5bd1, 0xcd},
{0x5bd2, 0xcd},
{0x5bd3, 0xcd},
{0x5bd4, 0xcd},
{0x5bd5, 0xcd},
{0x5bd6, 0xcd},
{0x5bd7, 0xcd},
{0x5bd8, 0xcd},
{0x5bd9, 0xcd},
{0x5bda, 0xcd},
{0x5bdb, 0xcd},
{0x5bdc, 0xcd},
{0x5bdd, 0xcd},
{0x5bde, 0xcd},
{0x5bdf, 0xcd},
{0x5be0, 0xcd},
{0x5be1, 0xcd},

};

static const SENSOR_REG_T ov32d40_video_setting[] = {
//----------------------------------------------
// MCLK : 24Mhz 
// resolution : 3264X1836 
// PD size : 816x456(PD cover area : 3264X1824) 
// Mipi : 4lanes 
// Mipi data rate : 1200Mbps/Lane 
// SCLK : 100Mhz 
// FPS : 30  
// LINELENGTH : 0x49e 
// FRAMELENGTH : 0xb04 
// tLine : 11.82us 
// 1 unit of r3500~3502: tLine  
// exp. step : 1  
// max exp : FRAMELENGTH - 4   
// min exp : 4  
// max analog gain : 62x (0x3e00)
// VB : 11.6 ms 
// mirror/flip   : Normal  
// 1st pixel color : B
//---------------------------------------------
{0x0304, 0x02},
{0x0305, 0x58},
{0x0316, 0x39},
{0x340b, 0x3b},
{0x3419, 0x16},
{0x341a, 0x09},
{0x3440, 0x56},
{0x3501, 0x01},
{0x3502, 0x02},
{0x3541, 0x00},
{0x3542, 0x82},
{0x3600, 0x64},
{0x3684, 0x06},
{0x3711, 0x30},
{0x3714, 0x22},
{0x3718, 0x10},
{0x371a, 0x7c},
{0x3760, 0x02},
{0x3761, 0x3e},
{0x3762, 0x02},
{0x3763, 0x02},
{0x3764, 0x02},
{0x3800, 0x00},
{0x3801, 0x00},
{0x3802, 0x02},
{0x3803, 0x64},
{0x3804, 0x19},
{0x3805, 0xbf},
{0x3806, 0x10},
{0x3807, 0xfb},
{0x3808, 0x0c},
{0x3809, 0xc0},
{0x380a, 0x07},
{0x380b, 0x2c},
{0x380c, 0x04},
{0x380d, 0x9e},
{0x380e, 0x0b},
{0x380f, 0x04},
{0x3813, 0x10},
{0x3814, 0x11},
{0x3815, 0x11},
{0x3820, 0x02},
{0x3821, 0x16},
{0x384c, 0x04},
{0x384d, 0x9e},
{0x388b, 0x16},
{0x388c, 0x0c},
{0x388d, 0xc0},
{0x388e, 0x07},
{0x388f, 0x20},
{0x4016, 0x3d},
{0x4837, 0x0d},
{0x4c00, 0x42},
{0x4c11, 0x02},
{0x4c12, 0x06},
{0x4c15, 0x02},
{0x4c16, 0x06},
{0x4c17, 0x06},
{0x4c18, 0x01},
{0x4c1b, 0x08},
{0x4c31, 0x02},
{0x4c32, 0x06},
{0x4c35, 0x02},
{0x4c36, 0x06},
{0x4c37, 0x06},
{0x4c38, 0x01},
{0x4c3b, 0x08},
{0x4c51, 0x02},
{0x4c52, 0x06},
{0x4c55, 0x02},
{0x4c56, 0x06},
{0x4c57, 0x06},
{0x4c58, 0x01},
{0x4c5b, 0x08},
{0x4c61, 0x10},
{0x4c62, 0x0c},
{0x4c63, 0xc0},
{0x4c65, 0x16},
{0x4c66, 0x07},
{0x4c67, 0x20},
{0x4c68, 0x0c},
{0x4c69, 0xe0},
{0x4c6a, 0x07},
{0x4c6b, 0x4c},
{0x5002, 0x0f},
{0x3016, 0xb0},
{0x3684, 0x06},
{0x3508, 0x01},
{0x3509, 0x20},
};

static const SENSOR_REG_T ov32d40_preview_setting[] = {
//----------------------------------------------
// MCLK : 24Mhz 
// resolution : 3264x2448 
// PD size : No PD output
// Mipi : 4lanes 
// Mipi data rate : 1200Mbps/Lane 
// SCLK : 100Mhz 
// FPS : 30  
// LINELENGTH : 0x49e 
// FRAMELENGTH : 0xb04 
// tLine : 11.82us 
// 1 unit of r3500~3502: tLine  
// exp. step : 1  
// max exp : FRAMELENGTH - 4   
// min exp : 4  
// max analog gain : 62x (0x3e00)
// VB : 4.4ms 
// mirror/flip   : Normal  
// 1st pixel color : B
//---------------------------------------------

{0x0304, 0x02},
{0x0305, 0x58},
{0x0316, 0x39},
{0x340b, 0x3b},
{0x3419, 0x16},
{0x341a, 0x09},
{0x3440, 0x56},
{0x3501, 0x01},
{0x3502, 0x02},
{0x3541, 0x00},
{0x3542, 0x82},
{0x3600, 0x64},
{0x3684, 0x06},
{0x3711, 0x30},
{0x3714, 0x22},
{0x3718, 0x10},
{0x371a, 0x7c},
{0x3760, 0x02},
{0x3761, 0x3e},
{0x3762, 0x02},
{0x3763, 0x02},
{0x3764, 0x02},
{0x3800, 0x00},
{0x3801, 0x00},
{0x3802, 0x00},
{0x3803, 0x00},
{0x3804, 0x19},
{0x3805, 0xbf},
{0x3806, 0x13},
{0x3807, 0x5f},
{0x3808, 0x0c},
{0x3809, 0xc0},
{0x380a, 0x09},
{0x380b, 0x90},
{0x380c, 0x04},
{0x380d, 0x9e},
{0x380e, 0x0b},
{0x380f, 0x04},
{0x3813, 0x10},
{0x3814, 0x11},
{0x3815, 0x11},
{0x3820, 0x02},
{0x3821, 0x16},
{0x384c, 0x04},
{0x384d, 0x9e},
{0x388b, 0x10},
{0x388c, 0x0c},
{0x388d, 0xc0},
{0x388e, 0x09},
{0x388f, 0x90},
{0x4016, 0x3d},
{0x4837, 0x0d},
{0x4c00, 0x42},
{0x4c11, 0x02},
{0x4c12, 0x06},
{0x4c15, 0x02},
{0x4c16, 0x06},
{0x4c17, 0x06},
{0x4c18, 0x01},
{0x4c1b, 0x08},
{0x4c31, 0x02},
{0x4c32, 0x06},
{0x4c35, 0x02},
{0x4c36, 0x06},
{0x4c37, 0x06},
{0x4c38, 0x01},
{0x4c3b, 0x08},
{0x4c51, 0x02},
{0x4c52, 0x06},
{0x4c55, 0x02},
{0x4c56, 0x06},
{0x4c57, 0x06},
{0x4c58, 0x01},
{0x4c5b, 0x08},
{0x4c61, 0x10},
{0x4c62, 0x0c},
{0x4c63, 0xc0},
{0x4c65, 0x10},
{0x4c66, 0x09},
{0x4c67, 0x90},
{0x4c68, 0x0c},
{0x4c69, 0xe0},
{0x4c6a, 0x09},
{0x4c6b, 0xb0},
{0x5002, 0x0f},
{0x3016, 0xb0},
{0x3684, 0x06},
{0x3508, 0x01},
{0x3509, 0x20},

};

static const SENSOR_REG_T ov32d40_snapshot_setting[] = {
//----------------------------------------------
// MCLK : 24Mhz 
// resolution : 3264x2448 
// PD size : No PD output
// Mipi : 4lanes 
// Mipi data rate : 1200Mbps/Lane 
// SCLK : 100Mhz 
// FPS : 30  
// LINELENGTH : 0x49e 
// FRAMELENGTH : 0xb04 
// tLine : 11.82us 
// 1 unit of r3500~3502: tLine  
// exp. step : 1  
// max exp : FRAMELENGTH - 4   
// min exp : 4  
// max analog gain : 62x (0x3e00)
// VB : 4.4ms 
// mirror/flip   : Normal  
// 1st pixel color : B
//---------------------------------------------

{0x0304, 0x02},
{0x0305, 0x58},
{0x0316, 0x39},
{0x340b, 0x3b},
{0x3419, 0x16},
{0x341a, 0x09},
{0x3440, 0x56},
{0x3501, 0x01},
{0x3502, 0x02},
{0x3541, 0x00},
{0x3542, 0x82},
{0x3600, 0x64},
{0x3684, 0x06},
{0x3711, 0x30},
{0x3714, 0x22},
{0x3718, 0x10},
{0x371a, 0x7c},
{0x3760, 0x02},
{0x3761, 0x3e},
{0x3762, 0x02},
{0x3763, 0x02},
{0x3764, 0x02},
{0x3800, 0x00},
{0x3801, 0x00},
{0x3802, 0x00},
{0x3803, 0x00},
{0x3804, 0x19},
{0x3805, 0xbf},
{0x3806, 0x13},
{0x3807, 0x5f},
{0x3808, 0x0c},
{0x3809, 0xc0},
{0x380a, 0x09},
{0x380b, 0x90},
{0x380c, 0x04},
{0x380d, 0x9e},
{0x380e, 0x0b},
{0x380f, 0x04},
{0x3813, 0x10},
{0x3814, 0x11},
{0x3815, 0x11},
{0x3820, 0x02},
{0x3821, 0x16},
{0x384c, 0x04},
{0x384d, 0x9e},
{0x388b, 0x10},
{0x388c, 0x0c},
{0x388d, 0xc0},
{0x388e, 0x09},
{0x388f, 0x90},
{0x4016, 0x3d},
{0x4837, 0x0d},
{0x4c00, 0x42},
{0x4c11, 0x02},
{0x4c12, 0x06},
{0x4c15, 0x02},
{0x4c16, 0x06},
{0x4c17, 0x06},
{0x4c18, 0x01},
{0x4c1b, 0x08},
{0x4c31, 0x02},
{0x4c32, 0x06},
{0x4c35, 0x02},
{0x4c36, 0x06},
{0x4c37, 0x06},
{0x4c38, 0x01},
{0x4c3b, 0x08},
{0x4c51, 0x02},
{0x4c52, 0x06},
{0x4c55, 0x02},
{0x4c56, 0x06},
{0x4c57, 0x06},
{0x4c58, 0x01},
{0x4c5b, 0x08},
{0x4c61, 0x10},
{0x4c62, 0x0c},
{0x4c63, 0xc0},
{0x4c65, 0x10},
{0x4c66, 0x09},
{0x4c67, 0x90},
{0x4c68, 0x0c},
{0x4c69, 0xe0},
{0x4c6a, 0x09},
{0x4c6b, 0xb0},
{0x5002, 0x0f},
{0x3016, 0xb0},
{0x3684, 0x06},
{0x3508, 0x01},
{0x3509, 0x20},

	};

static struct sensor_res_tab_info s_ov32d40_resolution_tab_raw[VENDOR_NUM] = {
    {.module_id = MODULE_SUNNY,
     .reg_tab =
         {{ADDR_AND_LEN_OF_ARRAY(ov32d40_init_setting), PNULL, 0, .width = 0,
           .height = 0, .xclk_to_sensor = EX_MCLK,
           .image_format = SENSOR_IMAGE_FORMAT_RAW},

          {ADDR_AND_LEN_OF_ARRAY(ov32d40_video_setting), PNULL, 0,
           .width = VIDEO_WIDTH, .height = VIDEO_HEIGHT,
           .xclk_to_sensor = EX_MCLK, .image_format = SENSOR_IMAGE_FORMAT_RAW},

          {ADDR_AND_LEN_OF_ARRAY(ov32d40_preview_setting), PNULL, 0,
           .width = PREVIEW_WIDTH, .height = PREVIEW_HEIGHT,
           .xclk_to_sensor = EX_MCLK, .image_format = SENSOR_IMAGE_FORMAT_RAW},

          {ADDR_AND_LEN_OF_ARRAY(ov32d40_snapshot_setting), PNULL, 0,
           .width = SNAPSHOT_WIDTH, .height = SNAPSHOT_HEIGHT,
           .xclk_to_sensor = EX_MCLK, .image_format = SENSOR_IMAGE_FORMAT_RAW}}}

    /*If there are multiple modules,please add here*/
};

static SENSOR_TRIM_T s_ov32d40_resolution_trim_tab[VENDOR_NUM] = {
    {.module_id = MODULE_SUNNY,
     .trim_info =
         {
             {0, 0, 0, 0, 0, 0, 0, {0, 0, 0, 0}},

             {.trim_start_x = VIDEO_TRIM_X,
              .trim_start_y = VIDEO_TRIM_Y,
              .trim_width = VIDEO_TRIM_W,
              .trim_height = VIDEO_TRIM_H,
              .line_time = VIDEO_LINE_TIME,
              .bps_per_lane = VIDEO_MIPI_PER_LANE_BPS,
              .frame_line = VIDEO_FRAME_LENGTH,
              .scaler_trim = {.x = VIDEO_TRIM_X,
                              .y = VIDEO_TRIM_Y,
                              .w = VIDEO_TRIM_W,
                              .h = VIDEO_TRIM_H}},

             {.trim_start_x = PREVIEW_TRIM_X,
              .trim_start_y = PREVIEW_TRIM_Y,
              .trim_width = PREVIEW_TRIM_W,
              .trim_height = PREVIEW_TRIM_H,
              .line_time = PREVIEW_LINE_TIME,
              .bps_per_lane = PREVIEW_MIPI_PER_LANE_BPS,
              .frame_line = PREVIEW_FRAME_LENGTH,
              .scaler_trim = {.x = PREVIEW_TRIM_X,
                              .y = PREVIEW_TRIM_Y,
                              .w = PREVIEW_TRIM_W,
                              .h = PREVIEW_TRIM_H}},

             {.trim_start_x = SNAPSHOT_TRIM_X,
              .trim_start_y = SNAPSHOT_TRIM_Y,
              .trim_width = SNAPSHOT_TRIM_W,
              .trim_height = SNAPSHOT_TRIM_H,
              .line_time = SNAPSHOT_LINE_TIME,
              .bps_per_lane = SNAPSHOT_MIPI_PER_LANE_BPS,
              .frame_line = SNAPSHOT_FRAME_LENGTH,
              .scaler_trim = {.x = SNAPSHOT_TRIM_X,
                              .y = SNAPSHOT_TRIM_Y,
                              .w = SNAPSHOT_TRIM_W,
                              .h = SNAPSHOT_TRIM_H}},
         }}

    /*If there are multiple modules,please add here*/

};

static SENSOR_REG_T ov32d40_shutter_reg[] = {
    {0x3500, 0x00}, 
	{0x3501, 0x01}, 
	{0x3502, 0x02},
};

static struct sensor_i2c_reg_tab ov32d40_shutter_tab = {
    .settings = ov32d40_shutter_reg, .size = ARRAY_SIZE(ov32d40_shutter_reg),
};

static SENSOR_REG_T ov32d40_again_reg[] = {
    {0x3508, 0x01},
    {0x3509, 0x20},
};

static struct sensor_i2c_reg_tab ov32d40_again_tab = {
    .settings = ov32d40_again_reg, .size = ARRAY_SIZE(ov32d40_again_reg),
};

static SENSOR_REG_T ov32d40_dgain_reg[] = {

};

static struct sensor_i2c_reg_tab ov32d40_dgain_tab = {
    .settings = ov32d40_dgain_reg, .size = ARRAY_SIZE(ov32d40_dgain_reg),
};

static SENSOR_REG_T ov32d40_frame_length_reg[] = {
    {0x380e, 0x0b}, 
	{0x380f, 0x04},
};

static struct sensor_i2c_reg_tab ov32d40_frame_length_tab = {
    .settings = ov32d40_frame_length_reg,
    .size = ARRAY_SIZE(ov32d40_frame_length_reg),
};

static SENSOR_REG_T ov32d40_grp_hold_start_reg[] = {

};

static struct sensor_i2c_reg_tab ov32d40_grp_hold_start_tab = {
    .settings = ov32d40_grp_hold_start_reg,
    .size = ARRAY_SIZE(ov32d40_grp_hold_start_reg),
};

static SENSOR_REG_T ov32d40_grp_hold_end_reg[] = {

};

static struct sensor_i2c_reg_tab ov32d40_grp_hold_end_tab = {
    .settings = ov32d40_grp_hold_end_reg,
    .size = ARRAY_SIZE(ov32d40_grp_hold_end_reg),
};

static struct sensor_aec_i2c_tag ov32d40_aec_info = {
    .slave_addr = (MAJOR_I2C_SLAVE_ADDR >> 1),
    .addr_bits_type = SENSOR_I2C_REG_16BIT,
    .data_bits_type = SENSOR_I2C_VAL_8BIT,
    .shutter = &ov32d40_shutter_tab,
    .again = &ov32d40_again_tab,
    .dgain = &ov32d40_dgain_tab,
    .frame_length = &ov32d40_frame_length_tab,
    .grp_hold_start = &ov32d40_grp_hold_start_tab,
    .grp_hold_end = &ov32d40_grp_hold_end_tab,
};

static SENSOR_STATIC_INFO_T s_ov32d40_static_info[VENDOR_NUM] = {
    {.module_id = MODULE_SUNNY,
     .static_info = {.f_num = 200,
                     .focal_length = 354,
                     .max_fps = 30,
                     .max_adgain = 62,
                     .ois_supported = 0,
                     .pdaf_supported = 2, // this version setting PD not output
                     .exp_valid_frame_num = 1,
                     .clamp_level = 64,
                     .adgain_valid_frame_num = 1,
                     .fov_info = {{3.995f, 2.996f}, 3.080f}}}
    /*If there are multiple modules,please add here*/
};

static SENSOR_MODE_FPS_INFO_T s_ov32d40_mode_fps_info[VENDOR_NUM] = {
    {.module_id = MODULE_SUNNY,
     {.is_init = 0,
      {{SENSOR_MODE_COMMON_INIT, 0, 1, 0, 0},
       {SENSOR_MODE_PREVIEW_ONE, 0, 1, 0, 0},
       {SENSOR_MODE_SNAPSHOT_ONE_FIRST, 0, 1, 0, 0},
       {SENSOR_MODE_SNAPSHOT_ONE_SECOND, 0, 1, 0, 0},
       {SENSOR_MODE_SNAPSHOT_ONE_THIRD, 0, 1, 0, 0},
       {SENSOR_MODE_PREVIEW_TWO, 0, 1, 0, 0},
       {SENSOR_MODE_SNAPSHOT_TWO_FIRST, 0, 1, 0, 0},
       {SENSOR_MODE_SNAPSHOT_TWO_SECOND, 0, 1, 0, 0},
       {SENSOR_MODE_SNAPSHOT_TWO_THIRD, 0, 1, 0, 0}}}}
    /*If there are multiple modules,please add here*/
};

static struct sensor_module_info s_ov32d40_module_info_tab[VENDOR_NUM] = {
    {.module_id = MODULE_SUNNY,
     .module_info = {.major_i2c_addr = MAJOR_I2C_SLAVE_ADDR >> 1,
                     .minor_i2c_addr = MINOR_I2C_SLAVE_ADDR >> 1,

                     .reg_addr_value_bits = SENSOR_I2C_REG_16BIT |
                                            SENSOR_I2C_VAL_8BIT |
                                            SENSOR_I2C_FREQ_400,

                     .avdd_val = SENSOR_AVDD_2800MV,
                     .iovdd_val = SENSOR_AVDD_1800MV,
                     .dvdd_val = SENSOR_AVDD_1200MV,
                     .image_pattern = SENSOR_IMAGE_PATTERN_RAWRGB_B,
                     .preview_skip_num = 1,
                     .capture_skip_num = 1,
                     .flash_capture_skip_num = 6,
                     .mipi_cap_skip_num = 0,
                     .preview_deci_num = 0,
                     .video_preview_deci_num = 0,

                     .threshold_eb = 0,
                     .threshold_mode = 0,
                     .threshold_start = 0,
                     .threshold_end = 0,

                     .sensor_interface =
                         {
                             .type = SENSOR_INTERFACE_TYPE_CSI2,
                             .bus_width = LANE_NUM,
                             .pixel_width = RAW_BITS,
                             .is_loose = 0,
                         },
                     .change_setting_skip_num = 1,
                     .horizontal_view_angle = 65,
                     .vertical_view_angle = 60}}

    /*If there are multiple modules,please add here*/
};

static struct sensor_ic_ops s_ov32d40_ops_tab;
struct sensor_raw_info *s_ov32d40_mipi_raw_info_ptr = PNULL; //&s_ov32d40_mipi_raw_info;

/*==============================================================================
 * Description:
 * sensor all info
 * please modify this variable acording your spec
 *============================================================================*/
SENSOR_INFO_T g_ov32d40_mipi_raw_info = {
    .hw_signal_polarity = SENSOR_HW_SIGNAL_PCLK_P | SENSOR_HW_SIGNAL_VSYNC_P |
                          SENSOR_HW_SIGNAL_HSYNC_P,
    .environment_mode = SENSOR_ENVIROMENT_NORMAL | SENSOR_ENVIROMENT_NIGHT,
    .image_effect = SENSOR_IMAGE_EFFECT_NORMAL |
                    SENSOR_IMAGE_EFFECT_BLACKWHITE | SENSOR_IMAGE_EFFECT_RED |
                    SENSOR_IMAGE_EFFECT_GREEN | SENSOR_IMAGE_EFFECT_BLUE |
                    SENSOR_IMAGE_EFFECT_YELLOW | SENSOR_IMAGE_EFFECT_NEGATIVE |
                    SENSOR_IMAGE_EFFECT_CANVAS,

    .wb_mode = 0,
    .step_count = 7,
    .reset_pulse_level = SENSOR_LOW_PULSE_RESET,
    .reset_pulse_width = 50,
    .power_down_level = SENSOR_LOW_LEVEL_PWDN,
    .identify_count = 1,
    .identify_code = {{.reg_addr = ov32d40_PID_ADDR,
                       .reg_value = ov32d40_PID_VALUE},
                      {.reg_addr = ov32d40_VER_ADDR,
                       .reg_value = ov32d40_VER_VALUE}},

    .source_width_max = SENSORMAX_WIDTH,
    .source_height_max = SENSORMAX_HEIGHT,
    .name = (cmr_s8 *)SENSOR_NAME,
    .image_format = SENSOR_IMAGE_FORMAT_RAW,

    .module_info_tab = s_ov32d40_module_info_tab,
    .module_info_tab_size = ARRAY_SIZE(s_ov32d40_module_info_tab),

    .resolution_tab_info_ptr = s_ov32d40_resolution_tab_raw,
    .sns_ops = &s_ov32d40_ops_tab,
    .raw_info_ptr = &s_ov32d40_mipi_raw_info_ptr,

    .video_tab_info_ptr = NULL,
    .sensor_version_info = (cmr_s8 *)"ov32d40_v1",
};

#endif
